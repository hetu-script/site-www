import{d as n}from"./app.e80a62a0.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";const a={},t=n(`<h1 id="function" tabindex="-1"><a class="header-anchor" href="#function" aria-hidden="true">#</a> Function</h1><p>Function is declared with <strong>fun</strong>, <strong>get</strong>, <strong>set</strong>, <strong>construct</strong>. The parameter list, return type and function body are all optional. For functions with no parameters, the empty brackets are also optional.</p><p>For a literal function expression, the function name is also optional if there&#39;s no type arguments and dart function typedef.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>fun <span class="token function">doubleIt</span><span class="token punctuation">(</span>n<span class="token operator">:</span> num<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> num <span class="token punctuation">{</span>
  <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token number">2</span>
<span class="token punctuation">}</span>

fun main <span class="token punctuation">{</span>
  def x <span class="token operator">=</span> <span class="token function">doubleIt</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token comment">// expect 14</span>
  <span class="token function">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>For functions declared with <strong>fun</strong>, when no return type is provided in declaration, it will have a return type of <strong>any</strong>. And it will return null if you didn&#39;t write return statement within the definition body.</p><p>Member functions can also be declared with <strong>get</strong>, <strong>set</strong>, <strong>construct</strong>, they literally means getter, setter and contructor function.</p><p>If a class have a getter or setter function. You can use &#39;class_name.func_name&#39; to get or set the value hence get rid of the empty brackets.</p><p>Functions can be nested, and nested functions can have names.</p><p>Function body could be a block statement (within &#39;{&#39; and &#39;}&#39;), or a single line expression after &#39;=&gt;&#39;.</p><p>Return type is marked by a single arrow (&#39;-&gt;&#39;) after the parameters brackets.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>fun <span class="token function">closure</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">42</span>
  fun nested <span class="token punctuation">{</span>
    <span class="token keyword">return</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> nested
<span class="token punctuation">}</span>

fun main <span class="token punctuation">{</span>
  <span class="token keyword">var</span> func <span class="token operator">=</span> <span class="token function">closure</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> n <span class="token operator">*</span> n <span class="token punctuation">)</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// print: 1849</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// print: 1936</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>Function are first class in Hetu script, you can pass them as arguments, return value and store/rebind them to variables.</p><h2 id="variadic-parameter" tabindex="-1"><a class="header-anchor" href="#variadic-parameter" aria-hidden="true">#</a> Variadic parameter</h2><p>In function declaration&#39;s parameters. &#39;...&#39; means you can pass as many positional arguments as you wish.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>external fun <span class="token function">print</span><span class="token punctuation">(</span><span class="token operator">...</span> args<span class="token operator">:</span> any<span class="token punctuation">)</span>

<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world!&#39;</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span> <span class="token comment">// okay!</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="return-value" tabindex="-1"><a class="header-anchor" href="#return-value" aria-hidden="true">#</a> Return value</h2><p>If there&#39;s a return statement is the function body, it will return the value of the expression after the keyword.</p><p>If there&#39;s no return type declaration nor return statement in the actual function body. Functions will inexplicitly return the last expression&#39;s value as its return value.</p><h2 id="literal-function-sometimes-called-function-expression-anonymous-function-closure-or-lambda" tabindex="-1"><a class="header-anchor" href="#literal-function-sometimes-called-function-expression-anonymous-function-closure-or-lambda" aria-hidden="true">#</a> Literal function (sometimes called function expression, anonymous function, closure or lambda)</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>fun <span class="token function">closure</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">42</span>
  fun <span class="token function">nested</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> nested
<span class="token punctuation">}</span>

<span class="token keyword">var</span> func <span class="token operator">=</span> <span class="token function">closure</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> n <span class="token operator">*</span> n <span class="token punctuation">)</span>
<span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>A literal function can have no keyword, in this situation, the parameter brackets are not omittable even if it&#39;s empty. The following way to define a function is all okay and they are the same to the compiler.</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token keyword">final</span> func1 <span class="token operator">=</span> fun <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">42</span> <span class="token punctuation">}</span>
<span class="token keyword">final</span> func2 <span class="token operator">=</span> fun <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">42</span>
<span class="token keyword">final</span> func3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token number">42</span> <span class="token punctuation">}</span>
<span class="token keyword">final</span> func4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">42</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="bind-a-literal-function-to-a-struct" tabindex="-1"><a class="header-anchor" href="#bind-a-literal-function-to-a-struct" aria-hidden="true">#</a> Bind a literal function to a struct</h2><p>You can bind a literal function (and only a literal function) onto a literal struct object and get a new function.</p><p>This is useful when you want to seperate data and logic, and still want the function to be able to have &#39;this&#39; keyword.</p><p>Notice that this method won&#39;t modify the function itself. It will give you a new function instead.</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token keyword">final</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">:</span> <span class="token string">&#39;nobody&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">final</span> func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;foobar&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">final</span> newfunc <span class="token operator">=</span>func<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
<span class="token function">newfunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// &#39;foobar&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="apply-a-literal-function-to-a-struct" tabindex="-1"><a class="header-anchor" href="#apply-a-literal-function-to-a-struct" aria-hidden="true">#</a> Apply a literal function to a struct</h2><p>You can apply a literal function (and only a literal function) onto a literal struct object and get the function call result, as if the function is the member of that object.</p><p>Apply is a one time action and will neither modify the function nor generate a new one.</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token keyword">final</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">:</span> <span class="token string">&#39;nobody&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">final</span> greeting <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;Hi! I\\&#39;m \${this.name}&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
greeting<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>`,31);function e(p,o){return t}var l=s(a,[["render",e]]);export{l as default};
