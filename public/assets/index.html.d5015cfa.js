import{r as t,o,c as i,a as s,b as r,w as p,F as c,d as a,e as n}from"./app.e80a62a0.js";import{_ as l}from"./plugin-vue_export-helper.21dcd24c.js";const u={},d=a('<h1 id="syntax-of-hetu-script-language" tabindex="-1"><a class="header-anchor" href="#syntax-of-hetu-script-language" aria-hidden="true">#</a> Syntax of Hetu Script Language</h1><p>Hetu&#39;s grammar is close to most modern languages, with a few key characteristics:</p><h2 id="declaration-keyword-first" tabindex="-1"><a class="header-anchor" href="#declaration-keyword-first" aria-hidden="true">#</a> Declaration keyword first</h2><p>Declarations starts with a keyword before the identifier: var, final, const, fun, construct, get, set, class, type, etc.</p><h2 id="semicolon" tabindex="-1"><a class="header-anchor" href="#semicolon" aria-hidden="true">#</a> Semicolon</h2><p>Semicolon is optional. In most cases, the interpreter will know when a statement is finished. In rare cases, the lexer will implicitly add &quot;end of statement token&quot; (a semicolon in default lexicon) to avoid ambiguities. For example, before a line when the line starts with one of &#39;++, --, (, [, {&#39;, or after a line when the line ends with &#39;return&#39;.</p><h2 id="type-annotation-writes-after-identifiers" tabindex="-1"><a class="header-anchor" href="#type-annotation-writes-after-identifiers" aria-hidden="true">#</a> Type annotation writes after identifiers</h2><p>Type annotation is optional. Type is annotated <strong>with a colon after the identifier</strong> like typescript/kotlin/swift.</p><h2 id="some-keyword-are-different" tabindex="-1"><a class="header-anchor" href="#some-keyword-are-different" aria-hidden="true">#</a> Some keyword are different</h2>',9),m=n("Use "),h=s("strong",null,"when",-1),b=n(" instead of "),k=s("strong",null,"switch",-1),f=n(", with "),g=n("more complex usage"),_=n(" to match the condition value. This is borrowed from kotlin."),w=a(`<h2 id="comments" tabindex="-1"><a class="header-anchor" href="#comments" aria-hidden="true">#</a> Comments</h2><p>Normal comments:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// This is a comment.</span>
<span class="token comment">/* These are multi-line comments:
another line.*/</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Documentation comments:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">/// This is a documentation comment</span>
fun <span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> int <span class="token punctuation">{</span>
  <span class="token comment">// some code</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="private-members" tabindex="-1"><a class="header-anchor" href="#private-members" aria-hidden="true">#</a> Private members</h2><p>You can specify a private member of a class/namespace/source by making its name starts with &#39;_&#39;.</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> _name
  construct <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    _name <span class="token operator">=</span> name
  <span class="token punctuation">}</span>
  fun greeting <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;Hi, I\\&#39;m &#39;</span><span class="token punctuation">,</span> _name<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">final</span> p <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;jimmy&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// print(p._name) // Error!</span>
p<span class="token punctuation">.</span><span class="token function">greeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>`,8);function y(x,v){const e=t("RouterLink");return o(),i(c,null,[d,s("p",null,[m,h,b,k,f,r(e,{to:"/docs/en-US/syntax/control_flow/#when"},{default:p(()=>[g]),_:1}),_]),w],64)}var N=l(u,[["render",y]]);export{N as default};
