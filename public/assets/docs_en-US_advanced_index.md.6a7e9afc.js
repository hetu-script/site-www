import{_ as n,c as a,o as s,a as t}from"./app.7121ab72.js";const f='{"title":"Advanced topics - Hetu Script Language","description":"","frontmatter":{"title":"Advanced topics - Hetu Script Language"},"headers":[{"level":2,"title":"Null check","slug":"null-check"},{"level":2,"title":"Future","slug":"future"},{"level":2,"title":"Error hanlding","slug":"error-hanlding"}],"relativePath":"docs/en-US/advanced/index.md","lastUpdated":1639384419786}',e={},p=t(`<h1 id="advanced-topics" tabindex="-1">Advanced topics <a class="header-anchor" href="#advanced-topics" aria-hidden="true">#</a></h1><h2 id="null-check" tabindex="-1">Null check <a class="header-anchor" href="#null-check" aria-hidden="true">#</a></h2><p>The script is not planning to introduce null safety. However, there are some syntax to help do null check:</p><div class="language-dart"><pre><code><span class="token keyword">var</span> a <span class="token comment">// a is null</span>
<span class="token comment">// Nullable member get:</span>
<span class="token keyword">final</span> value <span class="token operator">=</span> a<span class="token operator">?</span><span class="token punctuation">.</span>value <span class="token comment">// value is null and we won&#39;t get errors</span>
<span class="token comment">// If null then get another value</span>
<span class="token keyword">final</span> text <span class="token operator">=</span> a <span class="token operator">?</span><span class="token operator">?</span> <span class="token string">&#39;hi!&#39;</span> <span class="token comment">// text is &#39;hi!&#39;</span>
<span class="token comment">// If null then assign</span>
a <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">=</span> <span class="token number">42</span>
<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// a is 42 now</span>
</code></pre></div><h2 id="future" tabindex="-1">Future <a class="header-anchor" href="#future" aria-hidden="true">#</a></h2><p>All hetu functions are sync. The script do not support async/await functionality, and we are not planning to do so in the near future.</p><p>However, it is possible for an external function to return a Future value.</p><p>To make things easy, we added a simple wrapper for Dart&#39;s Future object. You can use the &#39;then&#39; method to do something when the Dart Future is completed.</p><p>Example:</p><div class="language-dart"><pre><code><span class="token keyword">import</span> <span class="token string">&#39;package:hetu_script/hetu_script.dart&#39;</span><span class="token punctuation">;</span>

<span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Imagine that this function is fetching user info from another service or database.</span>
  <span class="token keyword">return</span> <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span>
      <span class="token keyword">const</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;Hello world after 2 seconds!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> hetu <span class="token operator">=</span> <span class="token class-name">Hetu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  hetu<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>externalFunctions<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">&#39;fetch&#39;</span><span class="token punctuation">:</span> fetch<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  hetu<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">r&#39;&#39;&#39;
      external fun fetch
      final future = fetch()
      future.then((value) {
        print(&#39;future completed!&#39;)
      })
  &#39;&#39;&#39;</span><span class="token punctuation">,</span> isScript<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="error-hanlding" tabindex="-1">Error hanlding <a class="header-anchor" href="#error-hanlding" aria-hidden="true">#</a></h2><p>It&#39;s not recommended to try to handle error in the script. You should do this in the Dart code.</p><p>The script doesn&#39;t support &#39;try...catch&#39; functionality. However, it&#39;s possible to throw a error within the script using the Assert keyword.</p><p>For example, a statement like:</p><div class="language-dart"><pre><code><span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token number">5</span>
</code></pre></div><p>Will throw an &#39;assertion failed&#39; error. And the error message will contain the expression string after the keyword to let you know why this happened.</p><p>The expression after assert must be a boolean value.</p>`,17),o=[p];function c(r,l,u,i,k,d){return s(),a("div",null,o)}var m=n(e,[["render",c]]);export{f as __pageData,m as default};
