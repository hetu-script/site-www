import{_ as n,c as s,o as a,a as t}from"./app.2a03e7aa.js";const m='{"title":"Installation - Hetu Script Language","description":"","frontmatter":{"title":"Installation - Hetu Script Language"},"headers":[{"level":2,"title":"Flutter project","slug":"flutter-project"},{"level":2,"title":"File system and module import","slug":"file-system-and-module-import"}],"relativePath":"docs/en-US/installation/index.md","lastUpdated":1638783302526}',e={},p=t(`__VP_STATIC_START__<h1 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-hidden="true">#</a></h1><p>Add the packages in your pubspec.yaml.</p><div class="language-yaml"><pre><code><span class="token key atrule">dependencies</span><span class="token punctuation">:</span>
  <span class="token key atrule">hetu_script</span><span class="token punctuation">:</span> ^0.3.2
  <span class="token comment"># optional:</span>
  <span class="token comment"># hetu_script_dev_tools: ^0.0.1</span>
  <span class="token comment"># optional:</span>
  <span class="token comment"># hetu_script_flutter: ^0.0.1</span>
</code></pre></div><h2 id="flutter-project" tabindex="-1">Flutter project <a class="header-anchor" href="#flutter-project" aria-hidden="true">#</a></h2><p>To load a script file from assets, add the script file&#39;s path into your pubspec.yaml like other assets. The default folder is &#39;assets/scripts/&#39;,</p><div class="language-yaml"><pre><code><span class="token key atrule">assets</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> assets/scripts/main.ht
</code></pre></div><p>Those script will be pre-loaded by the new init method on Hetu class: <strong>initFlutter</strong>. You don&#39;t need to use old <strong>init</strong>. Also note that this is an async function.</p><p>Then you can load a asset script file by <strong>evalFile</strong> method:</p><div class="language-dart"><pre><code><span class="token keyword">final</span> hetu <span class="token operator">=</span> <span class="token class-name">Hetu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> hetu<span class="token punctuation">.</span><span class="token function">initFlutter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">final</span> result <span class="token operator">=</span> hetu<span class="token punctuation">.</span><span class="token function">evalFile</span><span class="token punctuation">(</span><span class="token string">&#39;main.ht&#39;</span><span class="token punctuation">,</span> invokeFunc<span class="token punctuation">:</span> <span class="token string">&#39;main&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="file-system-and-module-import" tabindex="-1">File system and module import <a class="header-anchor" href="#file-system-and-module-import" aria-hidden="true">#</a></h2><p>To handle module import from physical disk within the script, there&#39;s another package called: &#39;hetu_script_dev_tools&#39;.</p><p>You have to use the class <strong>HTFileSystemSourceContext</strong> provided by this package, to replace the default one:</p><div class="language-dart"><pre><code><span class="token keyword">import</span> <span class="token string">&#39;package:hetu_script/hetu_script.dart&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&#39;package:hetu_script_dev_tools/hetu_script_dev_tools.dart&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">final</span> sourceContext <span class="token operator">=</span> <span class="token class-name">HTFileSystemSourceContext</span><span class="token punctuation">(</span>root<span class="token punctuation">:</span> <span class="token string">&#39;../../script/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">final</span> hetu <span class="token operator">=</span> <span class="token class-name">Hetu</span><span class="token punctuation">(</span>sourceContext<span class="token punctuation">:</span> sourceContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
  hetu<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">final</span> result <span class="token operator">=</span> hetu<span class="token punctuation">.</span><span class="token function">evalFile</span><span class="token punctuation">(</span><span class="token string">&#39;import_test1.ht&#39;</span><span class="token punctuation">,</span> invokeFunc<span class="token punctuation">:</span> <span class="token string">&#39;main&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>content in &#39;import_test1.ht&#39;:</p><div class="language-kotlin"><pre><code><span class="token keyword">import</span> <span class="token string">&#39;hello.ht&#39;</span> <span class="token keyword">as</span> h

<span class="token keyword">fun</span> main <span class="token punctuation">{</span>
  <span class="token keyword">return</span> h<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>content in &#39;<a href="http://hello.ht" target="_blank" rel="noopener noreferrer">hello.ht</a>&#39;:</p><div class="language-javascript"><pre><code>fun hello <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">&#39;Hello, world!&#39;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>The &#39;hetu_script_dev_tools&#39; package also provided a <a href="./../command_line_tool/#REPL">REPL tool</a> for quick testing.</p>__VP_STATIC_END__`,18),o=[p];function c(l,i,u,r,k,d){return a(),s("div",null,o)}var _=n(e,[["render",c]]);export{m as __pageData,_ as default};
