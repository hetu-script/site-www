import{d as n}from"./app.34f2035c.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";const a={},e=n(`<h1 id="type-declaration" tabindex="-1"><a class="header-anchor" href="#type-declaration" aria-hidden="true">#</a> Type declaration</h1><p><strong>WARNING: Type system is not fully implemented yet. It&#39;s more of a kind of annotation. You won&#39;t get analysis errors from them currently.</strong></p><p>Variables will be given a type if it has an initialize expression. And you cannot re-assign it with another type.</p><p>However, if you declare a variable with no initialize expression, the variable will be considered as having a <strong>any</strong> type (equals to dart&#39;s dynamic type).</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;naruto&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// name = 2020 // error!</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Type is a variable in Hetu, it can be assigned and returned.</p><p>The type of a type is always &#39;type&#39;, no matter it&#39;s a primitive, instance, or function type.</p><p>Use &#39;typeof&#39; keyword to get the runtime type of a value.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>fun main <span class="token punctuation">{</span>
  <span class="token comment">// decalre a function typedef</span>
  <span class="token keyword">type</span> <span class="token class-name">funcTypedef</span> <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> num
  <span class="token comment">// assign a function to a value of a certain function type</span>
  <span class="token class-name"><span class="token keyword">var</span></span> numparse<span class="token operator">:</span> funcTypedef <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span>value<span class="token operator">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> num <span class="token punctuation">{</span> <span class="token keyword">return</span> num<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">}</span>
  <span class="token comment">// get a value&#39;s runtime type and return it from a function</span>
  <span class="token keyword">var</span> getType <span class="token operator">=</span> fun <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">typeof</span> numparse <span class="token punctuation">}</span>
  <span class="token keyword">var</span> funcTypedef2 <span class="token operator">=</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// use this new type</span>
  <span class="token keyword">var</span> strlength<span class="token operator">:</span> funcTypedef2 <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span>value<span class="token operator">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> num <span class="token punctuation">{</span> <span class="token keyword">return</span> value<span class="token punctuation">.</span>length <span class="token punctuation">}</span>
  <span class="token comment">// expected output: 11</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">strlength</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>`,9);function p(t,o){return e}var l=s(a,[["render",p]]);export{l as default};
