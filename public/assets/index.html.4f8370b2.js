import{r as a,o as s,c as n,a as i,b as o,w as r,F as l,d as c,e}from"./app.34f2035c.js";import{_ as p}from"./plugin-vue_export-helper.21dcd24c.js";const d={},u=c(`<h1 id="builtin-types-and-classes" tabindex="-1"><a class="header-anchor" href="#builtin-types-and-classes" aria-hidden="true">#</a> Builtin types and classes</h1><p>Most of the common primitive types in Hetu is in fact Dart values, you can use most of their apis directly and return them to Dart as it is.</p><ul><li>null</li><li>bool</li><li>num</li><li>int</li><li>double</li><li>String</li><li>List&lt;dynamic&gt;</li><li>Set&lt;dynamic&gt;</li><li>Map&lt;dynamic, dynamic&gt;</li><li>Function (the Dart function object)</li></ul><p>Note:</p><p>1, The type name for float numbers in Hetu is &#39;float&#39;. 2, There&#39;s no literal syntax for Set &amp; Map, you have to create them by using constructors. 3, All List\\Set\\Map created from the script side is of dynamic types.</p><h2 id="big-integers" tabindex="-1"><a class="header-anchor" href="#big-integers" aria-hidden="true">#</a> Big integers</h2><p>Both of the literal form of float and integer numbers in script are stored as 32 byte sized, which range from -2,147,483,648 to 2,147,483,647 for int and . This is due to the limitation of the runtime.js of Dart.</p><p>To manipulate bigger numbers, you can use preincluded class BigInt.</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token keyword">final</span> bi <span class="token operator">=</span> <span class="token class-name">BigInt</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;9223372036854775807&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="future" tabindex="-1"><a class="header-anchor" href="#future" aria-hidden="true">#</a> Future</h2>`,10),h=e("Check "),m=e("this page"),f=e(".");function g(b,_){const t=a("RouterLink");return s(),n(l,null,[u,i("p",null,[h,o(t,{to:"/docs/en-US/syntax/future/"},{default:r(()=>[m]),_:1}),f])],64)}var x=p(d,[["render",g]]);export{x as default};
