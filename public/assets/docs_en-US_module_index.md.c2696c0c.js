import{_ as e,c as t,o as a,a as n}from"./app.7121ab72.js";const f='{"title":"Module import & export - Hetu Script Language","description":"","frontmatter":{"title":"Module import & export - Hetu Script Language"},"headers":[{"level":2,"title":"Source type","slug":"source-type"},{"level":2,"title":"Import","slug":"import"},{"level":2,"title":"Export","slug":"export"}],"relativePath":"docs/en-US/module/index.md","lastUpdated":1639364007282}',s={},o=n(`<h1 id="module" tabindex="-1">Module <a class="header-anchor" href="#module" aria-hidden="true">#</a></h1><p>Hetu script codes are a batch of <strong>HTSource</strong> files. If a source contains import statement, the parser will try to fetch another source content by the import path through the <strong>HTResourceContext</strong>. The default <strong>HTResourceContext</strong> provided by the Interpreter is <strong>HTOverlayContext</strong>, it will not handle physical files and you need to manually add String content into the context for modules to import from.</p><h2 id="source-type" tabindex="-1">Source type <a class="header-anchor" href="#source-type" aria-hidden="true">#</a></h2><p>Hetu script file have two different way to interpret, controlled by the <strong>isScript</strong> parameter in the eval method of the Interpreter class.</p><ul><li>When <strong>isScript</strong> is not provided or set to false, interpreter will evaluate the source as <strong>SourceType.module</strong>. This kind of source file is organized like a C++, Java or Dart app. It only contains import statement and declarations(variable, function and class). The top level variables are lazily initialized (initialize when first used).</li><li>When <strong>isScript</strong> is true, interpreter will evaluate the source as <strong>SourceType.script</strong>. This kind of source file is organized like a Javascript, Python and Lua file. It may contain any expression and control statement that is allowed in a function body (including nested function and class declaration). And every expression is immediately evaluated.</li></ul><h2 id="import" tabindex="-1">Import <a class="header-anchor" href="#import" aria-hidden="true">#</a></h2><p>Use import statement to import from another script file.</p><ul><li>You can specify a list to limit the symbols imported.</li><li>You can set aliases for the imported symbols as well as the namespace as a whole.</li></ul><div class="language-javascript"><pre><code><span class="token keyword">import</span> <span class="token string">&#39;game.ht&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> hello <span class="token keyword">as</span> greeting<span class="token punctuation">,</span> calculator <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;hello.ht&#39;</span> <span class="token keyword">as</span> h

fun main <span class="token punctuation">{</span>
  h<span class="token punctuation">.</span><span class="token function">greeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="export" tabindex="-1">Export <a class="header-anchor" href="#export" aria-hidden="true">#</a></h2><p>Use export in a source to specify the symbols you wish to let other source access when they import from you.</p><ul><li>If there&#39;s no path provided, exported the symbols from the source contains this statement.</li><li>You can give a path after the export keyword, to export other source&#39;s content.</li></ul><div class="language-javascript"><pre><code><span class="token keyword">export</span> <span class="token punctuation">{</span>
  hello<span class="token punctuation">,</span>
  calculator<span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token string">&#39;game.ht&#39;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> hello <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;hello.ht&#39;</span>
</code></pre></div><p>If you have at least one export statement, nomatter it&#39;s a export + &#39;path&#39; form or export { namelist } form, you wont&#39; inexplicitly export any of the members.</p><p>Otherwise, every top level symbol will be exported by default.</p>`,15),r=[o];function i(p,l,c,u,d,h){return a(),t("div",null,r)}var y=e(s,[["render",i]]);export{f as __pageData,y as default};
