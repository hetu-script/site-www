import{_ as n,p as s,q as a,a1 as p}from"./framework-5866ffd3.js";const t={},e=p(`<h1 id="函数和方法-function-method" tabindex="-1"><a class="header-anchor" href="#函数和方法-function-method" aria-hidden="true">#</a> 函数和方法（function &amp; method）</h1><p>河图中的函数使用不同的关键字来声明，这代表了函数的类型，例如：<strong>fun, get, set, construct, factory</strong>。</p><p>函数声明的每一个部分都可能省略。如果省略了参数列表，则连参数列表的空括号也可以不用写。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>fun <span class="token function">doubleIt</span><span class="token punctuation">(</span>n<span class="token operator">:</span> num<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> num <span class="token punctuation">{</span>
  <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token number">2</span>
<span class="token punctuation">}</span>

fun main <span class="token punctuation">{</span>
  def x <span class="token operator">=</span> <span class="token function">doubleIt</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token comment">// expect 14</span>
  <span class="token function">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数定义的语句块中也可以定义函数和类。</p><p>函数在河图中是一等公民，可以将其当做表达式求值，也可以作为参数传递。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>fun <span class="token function">closure</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">42</span>
  fun nested <span class="token punctuation">{</span>
    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> nested
<span class="token punctuation">}</span>

fun main <span class="token punctuation">{</span>
  <span class="token keyword">var</span> func <span class="token operator">=</span> <span class="token function">closure</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> n <span class="token operator">*</span> n <span class="token punctuation">)</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// print: 1849</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// print: 1936</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="单行函数" tabindex="-1"><a class="header-anchor" href="#单行函数" aria-hidden="true">#</a> 单行函数</h2><p>和 Dart 一样，你可以使用 &#39;=&gt;&#39; 来定义以一个表达式作为定义的函数：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> func <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> x <span class="token operator">*</span> x
<span class="token keyword">final</span> sq <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// sq = 16</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="可选参数" tabindex="-1"><a class="header-anchor" href="#可选参数" aria-hidden="true">#</a> 可选参数</h2><p>和 Dart 一样，你可以使用可选位置参数，或者可选命名参数。并且也可以为其指定默认值。和 Dart 的不同之处在于，对于提供了默认值的参数，只要传递进来的值是 null，都会使用默认值来替换。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fun <span class="token function">posParam</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> <span class="token punctuation">[</span>b <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">*</span> b
<span class="token punctuation">}</span>


final r1 <span class="token operator">=</span> <span class="token function">posParam</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment">// r1 = 42</span>

fun <span class="token function">namedParam</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">*</span> b
<span class="token punctuation">}</span>

final r2 <span class="token operator">=</span> <span class="token function">namedParam</span><span class="token punctuation">(</span>b<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// r2 = 30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="变长参数列表" tabindex="-1"><a class="header-anchor" href="#变长参数列表" aria-hidden="true">#</a> 变长参数列表</h2><p>使用 &#39;...&#39; 来定义一个变长参数列表。此时这个函数可以接受任意长度的参数数量。在函数定义中，这个变长参数的名字将会以一个包含全部剩余参数的 List 作为它的值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>external fun <span class="token function">print</span><span class="token punctuation">(</span><span class="token operator">...</span> args<span class="token operator">:</span> any<span class="token punctuation">)</span>

<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world!&#39;</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span> <span class="token comment">// okay!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="省略参数名" tabindex="-1"><a class="header-anchor" href="#省略参数名" aria-hidden="true">#</a> 省略参数名</h2><p>你可以用 &#39;_&#39; 来省略某个参数的名字。这在某些函数式编程的场合有用，某些函数的实现用不到某些参数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fun <span class="token function">test1</span><span class="token punctuation">(</span><span class="token parameter">expect<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token punctuation">[</span>arg<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;running test1 with \${arg}: expect \${expect}, value \${value}&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

fun <span class="token function">test2</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token punctuation">[</span>_<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

fun <span class="token function">run</span><span class="token punctuation">(</span><span class="token parameter">expect<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">test1</span><span class="token punctuation">(</span>expect<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token string">&#39;test1&#39;</span><span class="token punctuation">)</span>
  <span class="token function">test2</span><span class="token punctuation">(</span>expect<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token string">&#39;test2&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数的返回值" tabindex="-1"><a class="header-anchor" href="#函数的返回值" aria-hidden="true">#</a> 函数的返回值</h2><p>如果函数定义中没有显式提供 return 语句，函数将会返回最后一行语句的求值（可能为 null）。</p><h2 id="匿名函数-也叫函数表达式-函数字面量或者-lambda" tabindex="-1"><a class="header-anchor" href="#匿名函数-也叫函数表达式-函数字面量或者-lambda" aria-hidden="true">#</a> 匿名函数（也叫函数表达式，函数字面量或者 lambda）</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fun <span class="token function">closure</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">42</span>
  fun <span class="token function">nested</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> nested
<span class="token punctuation">}</span>

<span class="token keyword">var</span> func <span class="token operator">=</span> <span class="token function">closure</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> n <span class="token operator">*</span> n <span class="token punctuation">)</span>
<span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数表达式和普通的函数声明的不同之处在于。函数关键字也可以省略，但此时不能省略参数列表的括号。下面五种函数字面量都是合法的：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> func0 <span class="token operator">=</span> fun meaning <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">42</span> <span class="token punctuation">}</span>
<span class="token keyword">final</span> func1 <span class="token operator">=</span> fun <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">42</span> <span class="token punctuation">}</span>
<span class="token keyword">final</span> func2 <span class="token operator">=</span> fun <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">42</span>
<span class="token keyword">final</span> func3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token number">42</span> <span class="token punctuation">}</span>
<span class="token keyword">final</span> func4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">42</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="立即执行的匿名函数" tabindex="-1"><a class="header-anchor" href="#立即执行的匿名函数" aria-hidden="true">#</a> 立即执行的匿名函数</h2><p>匿名函数本质上是个表达式，因此他可以求值，因此也可以立即对其进行函数执行：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">Future</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">42</span> <span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token number">41</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的例子中，在一个匿名函数中创建了一个Future对象，然后立即执行这个匿名函数并使用 then() api绑定了一个回调函数。 最终执行结果是先打印41，然后再打印42。</p><h2 id="匿名函数和-struct-的交互" tabindex="-1"><a class="header-anchor" href="#匿名函数和-struct-的交互" aria-hidden="true">#</a> 匿名函数和 struct 的交互</h2><h3 id="bind" tabindex="-1"><a class="header-anchor" href="#bind" aria-hidden="true">#</a> bind()</h3><p>bind 可以获得一个新的匿名函数，并且新函数是这个 struct 的成员函数。函数定义中的 this 将会绑定到这个 struct 上。这在某些需要分离逻辑和数据的场合比较有用。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;nobody&#39;</span></span>
<span class="token punctuation">}</span>
<span class="token keyword">final</span> func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;foobar&#39;</span></span>
<span class="token punctuation">}</span>
<span class="token keyword">final</span> newfunc <span class="token operator">=</span>func<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
<span class="token function">newfunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// &#39;foobar&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="apply" tabindex="-1"><a class="header-anchor" href="#apply" aria-hidden="true">#</a> apply()</h3><p>apply 和 bind() 类似，但只是一次性的将这个函数绑定到这个 struct 并立即调用，并不会获得新函数，也不会修改原来的函数。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;nobody&#39;</span></span>
<span class="token punctuation">}</span>
<span class="token keyword">final</span> greeting <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Hi! I\\&#39;m </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression"><span class="token keyword">this</span><span class="token punctuation">.</span>name</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
greeting<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,36),c=[e];function o(i,l){return s(),a("div",null,c)}const r=n(t,[["render",o],["__file","index.html.vue"]]);export{r as default};
