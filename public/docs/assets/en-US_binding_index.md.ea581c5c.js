import{o as n,c as a,a as s}from"./app.470af3c8.js";const t='{"title":"Binding","description":"","frontmatter":{},"headers":[{"level":2,"title":"Function","slug":"function"},{"level":3,"title":"Typedef of external function","slug":"typedef-of-external-function"},{"level":2,"title":"Binding external function","slug":"binding-external-function"},{"level":2,"title":"Typedef for unwrap Hetu function into Dart function","slug":"typedef-for-unwrap-hetu-function-into-dart-function"},{"level":2,"title":"Auto-Binding tools","slug":"auto-binding-tools"}],"relativePath":"en-US/binding/index.md","lastUpdated":1617594567559}',p={},o=s('<h1 id="binding"><a class="header-anchor" href="#binding" aria-hidden="true">#</a> Binding</h1><h2 id="function"><a class="header-anchor" href="#function" aria-hidden="true">#</a> Function</h2><h3 id="typedef-of-external-function"><a class="header-anchor" href="#typedef-of-external-function" aria-hidden="true">#</a> Typedef of external function</h3><p>External functions (for both global and methods) can be binded as the following type:</p><div class="language-dart"><pre><code><span class="token keyword">typedef</span> HTExternalFunction <span class="token operator">=</span> <span class="token keyword">dynamic</span> <span class="token keyword">Function</span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span>List<span class="token operator">&lt;</span><span class="token keyword">dynamic</span><span class="token operator">&gt;</span> positionalArgs<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token operator">&gt;</span> namedArgs<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>HTTypeId<span class="token operator">&gt;</span> typeArgs<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">await</span> hetu<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>externalFunctions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  <span class="token comment">// you can omit the type, and keep the correct type parameter names,</span>\n  <span class="token comment">// this way Dart will still count it as HTExternalFunction</span>\n  <span class="token string">&#39;hello&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>positionalArgs<span class="token punctuation">,</span> namedArgs<span class="token punctuation">,</span> typeArgs<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token string">&#39;greeting&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>or even you can directy write it as a Dart Function:</p><div class="language-dart"><pre><code><span class="token keyword">await</span> hetu<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>externalFunctions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  <span class="token string">&#39;hello&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token string">&#39;greeting&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>It&#39;s easier to write and read in Dart Function form. However, this way the Interpreter will have to use Dart&#39;s [Function.apply] feature to call it. This is normally slower and inefficient than direct call.</p><h2 id="binding-external-function"><a class="header-anchor" href="#binding-external-function" aria-hidden="true">#</a> Binding external function</h2><p>To call Dart functions in Hetu, just init Hetu with [externalFunctions].</p><p>Then define those dart funtion in Hetu with [external] keyword.</p><p>Then you can call those functions in Hetu.</p><p>You can pass object from Dart to Hetu by the return value of external functions.</p><p>You can pass object from Hetu to Dart by the return value of Interpreter&#39;s [invoke] function;</p><div class="language-typescript"><pre><code><span class="token keyword">import</span> <span class="token string">&#39;package:hetu_script/hetu_script.dart&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> hetu <span class="token operator">=</span> <span class="token function">Hetu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">await</span> hetu<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>externalFunctions<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&#39;hello&#39;</span><span class="token operator">:</span> <span class="token punctuation">(</span>\n        <span class="token punctuation">{</span>List<span class="token operator">&lt;</span>dynamic<span class="token operator">&gt;</span> positionalArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> dynamic<span class="token operator">&gt;</span> namedArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n            List<span class="token operator">&lt;</span>HTTypeId<span class="token operator">&gt;</span> typeArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token string">&#39;greeting&#39;</span><span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">await</span> hetu<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span>r<span class="token string">&#39;&#39;</span>&#39;\n      external fun hello\n      fun main <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> dartValue <span class="token operator">=</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;dart value:&#39;</span><span class="token punctuation">,</span> dartValue<span class="token punctuation">)</span>\n        dartValue<span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;bar&#39;</span>\n        <span class="token keyword">return</span> dartValue\n      <span class="token punctuation">}</span><span class="token string">&#39;&#39;</span>&#39;<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">var</span> hetuValue <span class="token operator">=</span> hetu<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;main&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;hetu value: $hetuValue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>And the output should be:</p><div class="language-"><pre><code>dart value: {greeting: hello}\nhetu value: {greeting: hello, foo: bar}\n</code></pre></div><h2 id="typedef-for-unwrap-hetu-function-into-dart-function"><a class="header-anchor" href="#typedef-for-unwrap-hetu-function-into-dart-function" aria-hidden="true">#</a> Typedef for unwrap Hetu function into Dart function</h2><p>In Hetu script:</p><div class="language-dart"><pre><code>fun <span class="token punctuation">[</span>DartFunction<span class="token punctuation">]</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> num<span class="token punctuation">,</span> b<span class="token punctuation">:</span> num<span class="token punctuation">)</span><span class="token punctuation">:</span> num <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b\n<span class="token punctuation">}</span>\n\nfun getFunc <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> add\n<span class="token punctuation">}</span>\n</code></pre></div><p>Then when you evaluate this [add] function in Hetu, you will get a native Dart function.</p><div class="language-dart"><pre><code><span class="token keyword">typedef</span> DartFunction <span class="token operator">=</span> int <span class="token keyword">Function</span><span class="token punctuation">(</span>int a<span class="token punctuation">,</span> int b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nint <span class="token function">hetuAdd</span><span class="token punctuation">(</span>DartFunction func<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> func <span class="token operator">=</span> hetu<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;getFunc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>You have to bind the Dart typedef in [Interpreter.init] before you can use it.</p><div class="language-dart"><pre><code><span class="token keyword">await</span> hetu<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>externalFunctions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  externalFunctionTypedef<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n  <span class="token string">&#39;DartFunction&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>HTFunction function<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>int a<span class="token punctuation">,</span> int b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// must convert the return type here to let dart know its return value type.</span>\n      <span class="token keyword">return</span> function<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">as</span> int<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>The typedef of the unwrapper is:</p><div class="language-dart"><pre><code><span class="token keyword">typedef</span> HTExternalFunctionTypedef <span class="token operator">=</span> <span class="token keyword">Function</span> <span class="token keyword">Function</span><span class="token punctuation">(</span>HTFunction hetuFunction<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="auto-binding-tools"><a class="header-anchor" href="#auto-binding-tools" aria-hidden="true">#</a> Auto-Binding tools</h2><p>Thanks to <a href="https://github.com/rockingdice" target="_blank" rel="noopener noreferrer">rockingdice</a> we now have an automated tool for auto-generate both Dart-side and Hetu-side binding declarations for any Dart classes.</p><p>Please check out this repository: <a href="https://github.com/hetu-script/hetu-script-autobinding" target="_blank" rel="noopener noreferrer">hetu-script-autobinding</a></p>',29);p.render=function(s,t,p,e,c,u){return n(),a("div",null,[o])};export default p;export{t as __pageData};
