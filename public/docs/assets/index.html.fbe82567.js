import{f as n}from"./app.fb854eb5.js";import{_ as a}from"./plugin-vue_export-helper.21dcd24c.js";const s={},e=n(`<h1 id="strict-mode" tabindex="-1"><a class="header-anchor" href="#strict-mode" aria-hidden="true">#</a> Strict mode</h1><p>You can set some flag on Hetu&#39;s config, to change some behavior regarding strict mode.</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token keyword">final</span> hetu <span class="token operator">=</span> <span class="token class-name">Hetu</span><span class="token punctuation">(</span>
  config<span class="token punctuation">:</span> <span class="token class-name">InterpreterConfig</span><span class="token punctuation">(</span>
    checkTypeErrors<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    computeConstantExpressionValue<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    allowVariableShadowing<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    allowImplicitVariableDeclaration<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    allowImplicitNullToZeroConversion<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    allowImplicitEmptyValueToFalseConversion<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="variable-shadowing" tabindex="-1"><a class="header-anchor" href="#variable-shadowing" aria-hidden="true">#</a> Variable shadowing</h2><p>If config.allowVariableShadowing == true, youcan define a variable with the same name of another variable in the same namespace without errors.</p><p>This config is default to true.</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">42</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;yay!&#39;</span></span> <span class="token comment">/// not an error, this is another variable</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="implicit-variable-declaration" tabindex="-1"><a class="header-anchor" href="#implicit-variable-declaration" aria-hidden="true">#</a> Implicit variable declaration</h2><p>If config.allowImplicitVariableDeclaration == true, a new variable will be created when assigning to a non-exist id.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>a <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span> <span class="token comment">// a is created!.</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="zero-value" tabindex="-1"><a class="header-anchor" href="#zero-value" aria-hidden="true">#</a> Zero value</h2><p>If config.allowImplicitVariableDeclaration == true, null value will be treated as 0 in these situations: &lt;, &gt;, &lt;=, &gt;=, +, -, ++, --, *, /, ~/, %, +=, -=, *=, /=, ~/=, %=.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>final obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token operator">++</span>obj<span class="token punctuation">.</span>count <span class="token comment">// obj = { count: 1 }</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>In other situations null value won&#39;t be inexplicitly converted, for example == &amp; !=.</strong>.</p><h2 id="truth-value" tabindex="-1"><a class="header-anchor" href="#truth-value" aria-hidden="true">#</a> Truth value</h2><p>If config.allowImplicitVariableDeclaration == true, some expressions (normally empty valus, but not include &#39;0&#39;) will be inexplicitly converted to boolean:</p><p>1, if (expr)</p><p>2, (expr) ? //... : //...</p><p>2, do { //... } while (expr)</p><p>3, while (expr)</p><p>4, expr1 &amp;&amp; expr2</p><p>5, expr1 || expr2</p><p>The conversion rules is:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token comment">/// inexpicit type conversion for truthy values</span>
bool <span class="token function">_truthy</span><span class="token punctuation">(</span><span class="token keyword">dynamic</span> condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>allowImplicitEmptyValueToFalseConversion<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>condition <span class="token operator">==</span> <span class="token boolean">false</span>
        condition <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span>
        condition <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&#39;&#39;</span></span> <span class="token operator">||</span>
        condition <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&#39;false&#39;</span></span> <span class="token operator">||</span>
        <span class="token punctuation">(</span>condition <span class="token operator">is</span> <span class="token class-name">Iterable</span> <span class="token operator">&amp;&amp;</span> condition<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span> <span class="token operator">||</span>
        <span class="token punctuation">(</span>condition <span class="token operator">is</span> <span class="token class-name">Map</span> <span class="token operator">&amp;&amp;</span> condition<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span> <span class="token operator">||</span>
        <span class="token punctuation">(</span>condition <span class="token operator">is</span> <span class="token class-name">HTStruct</span> <span class="token operator">&amp;&amp;</span> condition<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> condition<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p><strong>In other situations boolean won&#39;t be inexplicitly converted</strong>.</p>`,25);function p(t,o){return e}var r=a(s,[["render",p]]);export{r as default};
