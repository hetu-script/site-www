import{_ as s,M as o,p as i,q as l,R as a,t as e,N as r,a1 as n}from"./framework-3f81730e.js";const d={},c=n(`<h1 id="hetu-script-command-line-tool" tabindex="-1"><a class="header-anchor" href="#hetu-script-command-line-tool" aria-hidden="true">#</a> Hetu Script command line tool</h1><p>A command line REPL tool for testing.</p><h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation" aria-hidden="true">#</a> Installation</h2><p>You can activate this tool globally, by the following command:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>dart pub global activate hetu_script_dev_tools
// or you can use a git url or local path:
// dart pub global activate --source path G:\\_dev\\hetu-script\\dev-tools
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then you can use command line tool &#39;hetu&#39; in any directory on your computer.</p>`,6),p={href:"https://dart.dev/tools/pub/cmd/pub-global",target:"_blank",rel:"noopener noreferrer"},u=n(`<h2 id="repl" tabindex="-1"><a class="header-anchor" href="#repl" aria-hidden="true">#</a> REPL</h2><p>If no arguments is provided when execute, the command tool will enter REPL mode.</p><p>In REPL mode, every exrepssion you entered will be evaluated and print out immediately.</p><p>If you want to write multiple line in REPL mode, use &#39;\\&#39; to end a line.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token operator">&gt;&gt;&gt;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">42</span>
<span class="token operator">&gt;&gt;&gt;</span>a
<span class="token number">42</span>
<span class="token operator">&gt;&gt;&gt;</span>fun hello <span class="token punctuation">{</span>\\
<span class="token keyword">return</span> a <span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;&gt;</span>hello
<span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">any</span> <span class="token comment">// repl print</span>
<span class="token operator">&gt;&gt;&gt;</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">42</span> <span class="token comment">// repl print</span>
<span class="token operator">&gt;&gt;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="run" tabindex="-1"><a class="header-anchor" href="#run" aria-hidden="true">#</a> Run</h2><p>Run a Hetu source file on your disk. The file could be a script source or a compiled bytecode.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>hetu run [path]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="format" tabindex="-1"><a class="header-anchor" href="#format" aria-hidden="true">#</a> Format</h2><p>Format a Hetu source file on your disk and save the result to file.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>hetu format [path] [option]
      --out(-o) [outpath]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="compile" tabindex="-1"><a class="header-anchor" href="#compile" aria-hidden="true">#</a> Compile</h2><p>Compile a Hetu source file on your disk into bytecode.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>hetu compile [path] [output_path] [option]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="analyze" tabindex="-1"><a class="header-anchor" href="#analyze" aria-hidden="true">#</a> Analyze</h2><p>Analyze a Hetu source file on your disk. List all warnings and errors.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>hetu analyze [path]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,17);function m(h,v){const t=o("ExternalLinkIcon");return i(),l("div",null,[c,a("p",null,[e("(If you are facing any problems, please check this official document about "),a("a",p,[e("pub global activate"),r(t)]),e(")")]),u])}const g=s(d,[["render",m],["__file","D:/_dev/hetu-script/docs/docs/.vuepress/.temp/pages/en-US/guide/command_line_tool/index.html.vue"]]);export{g as default};
