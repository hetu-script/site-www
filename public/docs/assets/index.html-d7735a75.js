import{_ as c,M as e,p as l,q as i,R as n,t as s,N as a,V as u,a1 as p}from"./framework-3f81730e.js";const r={},k=p(`<h1 id="和-dart-代码的交互" tabindex="-1"><a class="header-anchor" href="#和-dart-代码的交互" aria-hidden="true">#</a> 和 Dart 代码的交互</h1><p>在脚本中可以用三种方式和 Dart 代码进行交互：内置类，Json 和绑定。这三种方法各有优劣，可以根据实际需求选择。</p><h2 id="和-dart-传递值" tabindex="-1"><a class="header-anchor" href="#和-dart-传递值" aria-hidden="true">#</a> 和 Dart 传递值</h2><p>你可以通过 <strong>invoke()</strong> 接口的参数来向脚本函数传递值。脚本会将这个函数的返回值直接返回到 Dart 这边。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> result <span class="token operator">=</span> hetu<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;calculate&#39;</span></span><span class="token punctuation">,</span> positionalArgs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> namedArgs<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&#39;isFloat&#39;</span></span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// equivalent in script</span>
<span class="token comment">// final result = calculate(6, 7, isFloat: true)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="内置类" tabindex="-1"><a class="header-anchor" href="#内置类" aria-hidden="true">#</a> 内置类</h2><p>河图已经内置下面这些类的绑定，因此你可以直接在脚本中传递、修改这些对象：</p><ul><li>null</li><li>bool</li><li>int</li><li>double (it is called float in the script)</li><li>String (it is called str in the script)</li><li>List&lt;dynamic&gt;</li><li>Set&lt;dynamic&gt;</li><li>Map&lt;dynamic, dynamic&gt;</li><li>Function</li></ul><p>你可以直接在脚本中使用 <strong>[]</strong> 语法来访问和修改 Dart 中的 <strong>List, Map</strong> 对象。也可以直接使用 <strong>()</strong> 来调用 Dart 中的函数。</p><h2 id="json" tabindex="-1"><a class="header-anchor" href="#json" aria-hidden="true">#</a> Json</h2><p>脚本中的对象字面量，在 Dart 中体现为 <strong>HTStruct</strong> 对象。这个对象在 Dart 中可以像 Map 那样直接使用 <strong>[]</strong> 来修改其成员。在脚本中则具有 <strong>toJson()</strong> 和 <strong>fromJson()</strong> 接口。因此可以使用这个对象来在 Dart 和脚本之间传递数值。</p><p>例如我们在脚本中有如下定义：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> book <span class="token operator">=</span> Prototype<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token keyword">data</span><span class="token punctuation">)</span>
  <span class="token function">print</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Dart 代码中有如下定义：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> data <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-literal"><span class="token string">&#39;id&#39;</span></span><span class="token punctuation">:</span> <span class="token number">324</span><span class="token punctuation">,</span>
  <span class="token string-literal"><span class="token string">&#39;title&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Catcher in the Rye&#39;</span></span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
hetu<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;main&#39;</span></span><span class="token punctuation">,</span> positionalArgs<span class="token punctuation">:</span> <span class="token punctuation">[</span>data<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将会在 Dart 中获得下面的输出结果：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">324</span><span class="token punctuation">,</span>
  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Catcher in the Rye&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="绑定" tabindex="-1"><a class="header-anchor" href="#绑定" aria-hidden="true">#</a> 绑定</h2><p>使用内置类和对象字面量来传递值比较简单快捷。但如果你想要使用 Dart 中的已有类定义，或者想要调用 Dart 函数，则需要通过<strong>绑定</strong>的方式。</p><h3 id="外部函数" tabindex="-1"><a class="header-anchor" href="#外部函数" aria-hidden="true">#</a> 外部函数</h3><p>你可以直接将任意 Dart 函数绑定到脚本中：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">await</span> hetu<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>externalFunctions<span class="token punctuation">:</span> <span class="token punctuation">{</span>
  <span class="token string-literal"><span class="token string">&#39;hello&#39;</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&#39;greeting&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;hello&#39;</span></span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样写比较简明易懂，但通过这种方式定义的外部函数绑定，将会使用 Dart 中的 <strong>Function.apply</strong> 功能调用，相比直接调用，这个功能的运行效率通常比较低下（大约慢 10 倍左右）。因此，建议以如下形式定义一个外部函数：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">await</span> hetu<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>externalFunctions<span class="token punctuation">:</span> <span class="token punctuation">{</span>
  <span class="token string-literal"><span class="token string">&#39;hello&#39;</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span>entity<span class="token punctuation">,</span> <span class="token punctuation">{</span>positionalArgs<span class="token punctuation">,</span> namedArgs<span class="token punctuation">,</span> typeArgs<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&#39;greeting&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;hello&#39;</span></span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>包含类型的外部函数完整定义如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">/// typedef of external function for binding.</span>
<span class="token keyword">typedef</span> <span class="token class-name">HTExternalFunction</span> <span class="token operator">=</span> <span class="token keyword">dynamic</span> <span class="token class-name">Function</span><span class="token punctuation">(</span>
    <span class="token class-name">HTEntity</span> entity<span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> positionalArgs<span class="token punctuation">,</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> namedArgs<span class="token punctuation">,</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HTType</span><span class="token punctuation">&gt;</span></span> typeArgs<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要使用你刚才定义的外部函数，需要在脚本中使用 <strong>external</strong> 关键字声明这个函数。</p><p>下面是一个绑定并使用外部函数的完整例子：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token string">&#39;package:hetu_script/hetu_script.dart&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> async <span class="token punctuation">{</span>
  final hetu <span class="token operator">=</span> <span class="token function">Hetu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> hetu<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>externalFunctions<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;hello&#39;</span><span class="token operator">:</span> <span class="token punctuation">(</span>HTEntity entity<span class="token punctuation">,</span>
        <span class="token punctuation">{</span>List<span class="token operator">&lt;</span>dynamic<span class="token operator">&gt;</span> positionalArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> dynamic<span class="token operator">&gt;</span> namedArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            List<span class="token operator">&lt;</span>HTTypeId<span class="token operator">&gt;</span> typeArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token string-property property">&#39;greeting&#39;</span><span class="token operator">:</span> <span class="token string">&#39;Hello from Dart!&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  final hetuValue <span class="token operator">=</span> hetu<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span>r<span class="token string">&#39;&#39;</span>&#39;
      external fun hello
      <span class="token keyword">var</span> dartValue <span class="token operator">=</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      dartValue<span class="token punctuation">[</span><span class="token string">&#39;reply&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;Hi, this is Hetu.&#39;</span>
      dartValue <span class="token comment">// the script will return the value of it&#39;s last expression</span>
      <span class="token string">&#39;&#39;</span>&#39;<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;hetu value: $hetuValue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的程序的输出结果是：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>hetu value: {&#39;greeting&#39;: &#39;Hello from Dart!&#39;, &#39;reply&#39;: &#39;Hi, this is Hetu.&#39;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="绑定一个外部方法" tabindex="-1"><a class="header-anchor" href="#绑定一个外部方法" aria-hidden="true">#</a> 绑定一个外部方法</h3><p>你可以在脚本中的类定义中，定义外部方法（外部成员函数）。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Someone</span> <span class="token punctuation">{</span>
  <span class="token keyword">external</span> fun calculate
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于脚本类中的外部成员函数，在 Dart 侧的定义和普通函数一样：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">dynamic</span> <span class="token function">calculate</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> <span class="token punctuation">{</span>positionalArgs<span class="token punctuation">,</span> namedArgs<span class="token punctuation">,</span> typeArgs<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// do somthing about the object</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但在绑定时，约定使用 className.funcName 的形式作为绑定名：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// the key of this external method have to be in the form of &#39;className.methodName&#39;</span>
hetu<span class="token punctuation">.</span><span class="token function">bindExternalFunction</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Someone.calculate&#39;</span></span><span class="token punctuation">,</span> calculate<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在脚本中，外部方法就可以和普通脚本函数一样使用了：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> ss <span class="token operator">=</span> <span class="token class-name">Someone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
ss<span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>对于命名构造体（named struct），可以使用相同的方式来绑定外部成员函数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>struct Person <span class="token punctuation">{</span>
  external fun sing
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="外部类绑定的定义和声明" tabindex="-1"><a class="header-anchor" href="#外部类绑定的定义和声明" aria-hidden="true">#</a> 外部类绑定的定义和声明</h3><p>你可以在脚本中定义一个外部类，然后通过绑定的方式来访问它的静态成员或者实例成员。</p><p>外部类的绑定包含下面四部分的代码：</p>`,45),d=n("li",null,[n("p",null,"一个 Dart class 的声明。这部分是纯粹的 Dart。通常你已经写好了这部分代码，而且也无须作任何修改。")],-1),v={href:"https://dart.dev/guides/language/extension-methods",target:"_blank",rel:"noopener noreferrer"},m=n("strong",null,"htFetch 和 htAssign",-1),g=n("strong",null,"HTExternalClass",-1),b=n("strong",null,"memberGet, memberSet, instanceMemberGet, instanceMemberSet",-1),y=n("strong",null,"bindExternalClass()",-1),h=n("li",null,[n("p",null,[s("你还需要在脚本中使用 "),n("strong",null,"external"),s(" 关键字声明这个类和其成员。这可以让脚本本身进行语法检查、函数参数赋初值等。")])],-1),w=p(`<p>下面是一个定义并使用一个外部类的完整例子：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:hetu_script/hetu_script.dart&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:hetu_script/binding.dart&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token keyword">final</span> races <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;Caucasian&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token class-name">String</span> _level <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;0&#39;</span></span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token keyword">get</span> level <span class="token operator">=</span><span class="token operator">&gt;</span> _level<span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token keyword">set</span> <span class="token function">level</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> _level <span class="token operator">=</span> value<span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">meaning</span><span class="token punctuation">(</span>int n<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string-literal"><span class="token string">&#39;The meaning of life is </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">n</span></span><span class="token string">&#39;</span></span><span class="token punctuation">;</span>

  <span class="token class-name">String</span> <span class="token keyword">get</span> child <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string-literal"><span class="token string">&#39;Tom&#39;</span></span><span class="token punctuation">;</span>
  <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  <span class="token class-name">String</span> race<span class="token punctuation">;</span>

  <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Jimmy&#39;</span></span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>race <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Caucasian&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">withName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>race <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Caucasian&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">void</span> <span class="token function">greeting</span><span class="token punctuation">(</span><span class="token class-name">String</span> tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Hi! </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">tag</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">extension</span> <span class="token class-name">PersonBinding</span> <span class="token keyword">on</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token keyword">dynamic</span> <span class="token function">htFetch</span><span class="token punctuation">(</span><span class="token class-name">String</span> varName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>varName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&#39;name&#39;</span></span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&#39;race&#39;</span></span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> race<span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&#39;greeting&#39;</span></span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">HTEntity</span> entity<span class="token punctuation">,</span>
                <span class="token punctuation">{</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> positionalArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> namedArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HTType</span><span class="token punctuation">&gt;</span></span> typeArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span>
            <span class="token function">greeting</span><span class="token punctuation">(</span>positionalArgs<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&#39;child&#39;</span></span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> child<span class="token punctuation">;</span>
      <span class="token keyword">default</span><span class="token punctuation">:</span>
        <span class="token keyword">throw</span> <span class="token class-name">HTError</span><span class="token punctuation">.</span><span class="token function">undefined</span><span class="token punctuation">(</span>varName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">htAssign</span><span class="token punctuation">(</span><span class="token class-name">String</span> varName<span class="token punctuation">,</span> <span class="token keyword">dynamic</span> varValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>varName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&#39;name&#39;</span></span><span class="token punctuation">:</span>
        name <span class="token operator">=</span> varValue<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&#39;race&#39;</span></span><span class="token punctuation">:</span>
        race <span class="token operator">=</span> varValue<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">default</span><span class="token punctuation">:</span>
        <span class="token keyword">throw</span> <span class="token class-name">HTError</span><span class="token punctuation">.</span><span class="token function">undefined</span><span class="token punctuation">(</span>varName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">PersonClassBinding</span> <span class="token keyword">extends</span> <span class="token class-name">HTExternalClass</span> <span class="token punctuation">{</span>
  <span class="token class-name">PersonClassBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Person&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">dynamic</span> <span class="token function">memberGet</span><span class="token punctuation">(</span><span class="token class-name">String</span> varName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>varName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&#39;Person&#39;</span></span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">HTEntity</span> entity<span class="token punctuation">,</span>
                <span class="token punctuation">{</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> positionalArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> namedArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HTType</span><span class="token punctuation">&gt;</span></span> typeArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span>
            <span class="token class-name">Person</span><span class="token punctuation">(</span>positionalArgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> positionalArgs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&#39;Person.withName&#39;</span></span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">HTEntity</span> entity<span class="token punctuation">,</span>
                <span class="token punctuation">{</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> positionalArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> namedArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HTType</span><span class="token punctuation">&gt;</span></span> typeArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span>
            <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">withName</span><span class="token punctuation">(</span>positionalArgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                <span class="token punctuation">(</span>positionalArgs<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">?</span> positionalArgs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Caucasion&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&#39;Person.meaning&#39;</span></span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">HTEntity</span> entity<span class="token punctuation">,</span>
                <span class="token punctuation">{</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> positionalArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> namedArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HTType</span><span class="token punctuation">&gt;</span></span> typeArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span>
            <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">meaning</span><span class="token punctuation">(</span>positionalArgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&#39;Person.level&#39;</span></span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>level<span class="token punctuation">;</span>
      <span class="token keyword">default</span><span class="token punctuation">:</span>
        <span class="token keyword">throw</span> <span class="token class-name">HTError</span><span class="token punctuation">.</span><span class="token function">undefined</span><span class="token punctuation">(</span>varName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">memberSet</span><span class="token punctuation">(</span><span class="token class-name">String</span> varName<span class="token punctuation">,</span> <span class="token keyword">dynamic</span> varValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>varName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&#39;Person.race&#39;</span></span><span class="token punctuation">:</span>
        <span class="token keyword">throw</span> <span class="token class-name">HTError</span><span class="token punctuation">.</span><span class="token function">immutable</span><span class="token punctuation">(</span>varName<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&#39;Person.level&#39;</span></span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>level <span class="token operator">=</span> varValue<span class="token punctuation">;</span>
      <span class="token keyword">default</span><span class="token punctuation">:</span>
        <span class="token keyword">throw</span> <span class="token class-name">HTError</span><span class="token punctuation">.</span><span class="token function">undefined</span><span class="token punctuation">(</span>varName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">dynamic</span> <span class="token function">instanceMemberGet</span><span class="token punctuation">(</span><span class="token keyword">dynamic</span> object<span class="token punctuation">,</span> <span class="token class-name">String</span> varName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> i <span class="token operator">=</span> object <span class="token operator">as</span> <span class="token class-name">Person</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> i<span class="token punctuation">.</span><span class="token function">htFetch</span><span class="token punctuation">(</span>varName<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">instanceMemberSet</span><span class="token punctuation">(</span><span class="token keyword">dynamic</span> object<span class="token punctuation">,</span> <span class="token class-name">String</span> varName<span class="token punctuation">,</span> <span class="token keyword">dynamic</span> varValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> i <span class="token operator">=</span> object <span class="token operator">as</span> <span class="token class-name">Person</span><span class="token punctuation">;</span>
    i<span class="token punctuation">.</span><span class="token function">htAssign</span><span class="token punctuation">(</span>varName<span class="token punctuation">,</span> varValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">final</span> hetu <span class="token operator">=</span> <span class="token class-name">Hetu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  hetu<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>externalClasses<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">PersonClassBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  hetu<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;&#39;&#39;
      external class Person {
        var race: str
        construct([name: str = &#39;Jimmy&#39;, race: str = &#39;Caucasian&#39;]);
        get child
        static fun meaning(n: num)
        static get level
        static set level (value: str)
        construct withName(name: str, [race: str = &#39;Caucasian&#39;])
        var name
        fun greeting(tag: str)
      }
      fun main {
        var p1: Person = Person()
        p1.greeting(&#39;jimmy&#39;)
        print(Person.meaning(42))
        print(typeof p1)
        print(p1.name)
        print(p1.child)
        print(&#39;My race is&#39;, p1.race)
        p1.race = &#39;Reptile&#39;
        print(&#39;Oh no! My race turned into&#39;, p1.race)
        Person.level = &#39;3&#39;
        print(Person.level)

        var p2 = Person.withName(&#39;Jimmy&#39;)
        print(p2.name)
        p2.name = &#39;John&#39;
      }
      &#39;&#39;&#39;</span></span><span class="token punctuation">,</span> isModule<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> invokeFunc<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;main&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="外部-getter" tabindex="-1"><a class="header-anchor" href="#外部-getter" aria-hidden="true">#</a> 外部 Getter</h4><p>Getter 是用来访问对象属性的特殊函数。对于此种函数，你无须在 <strong>external class binding</strong> 或者 <strong>extension on instance</strong> 上定义完整的函数，而只需直接返回其对应的值即可。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">PersonClassBinding</span> <span class="token keyword">extends</span> <span class="token class-name">HTExternalClass</span> <span class="token punctuation">{</span>
  <span class="token class-name">PersonClassBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Person&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">dynamic</span> <span class="token function">memberGet</span><span class="token punctuation">(</span><span class="token class-name">String</span> varName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&#39;Person.level&#39;</span></span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>level<span class="token punctuation">;</span>
      <span class="token keyword">default</span><span class="token punctuation">:</span>
        <span class="token keyword">throw</span> <span class="token class-name">HTError</span><span class="token punctuation">.</span><span class="token function">undefined</span><span class="token punctuation">(</span>varName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="部分绑定" tabindex="-1"><a class="header-anchor" href="#部分绑定" aria-hidden="true">#</a> 部分绑定</h4><p>你无需让每个绑定定义都完全包含上述的四个部分。</p><ul><li><p>如果你只定义了外部类（external class binding），并没有定义对象扩展方法（extension on instance），这意味着你可以在脚本中<strong>以 className.memberName 的形式访问类静态成员</strong>。</p></li><li><p>如果你在外部类中不定义 memberGet 和 memberSet，而只定义 instanceMemberGet 和 instanceMemberSet，这样你可以在脚本中直接使用这个 Dart 对象，只是<strong>不能通过构造函数创建这个对象，或者访问静态成员</strong>。</p></li></ul><h3 id="dart-函数解包装定义" tabindex="-1"><a class="header-anchor" href="#dart-函数解包装定义" aria-hidden="true">#</a> Dart 函数解包装定义</h3><p>某些情况下，你可能希望将一个脚本函数，当作普通的 Dart 函数，作为参数传递给另一个 Dart 函数（例如在 Flutter 的 Widget 构造函数中的 onPressed 之类的场合）。</p><p>你可以通过绑定一个<strong>外部解包装函数定义</strong>来实现这个目的。在脚本中，在函数名之前的 <strong>[]</strong> 用来定义外部解包装函数定义：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>fun <span class="token punctuation">[</span><span class="token class-name">DartFunction</span><span class="token punctuation">]</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> num<span class="token punctuation">,</span> b<span class="token punctuation">:</span> num<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> num <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>

fun getFunc <span class="token punctuation">{</span>
  <span class="token keyword">return</span> add
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以使用解释器上的 <strong>bindExternalFunctionType()</strong> 来绑定这个解包装函数。当然也可以直接在解释器初始化时，作为参数传入 <strong>init()</strong> 方法。</p><p>下面的例子展示了如何定义 <strong>DartFunction</strong> 这个解包装函数：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">await</span> hetu<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>externalFunctions<span class="token punctuation">:</span> <span class="token punctuation">{</span>
  externalFunctionTypedef<span class="token punctuation">:</span> <span class="token punctuation">{</span>
  <span class="token string-literal"><span class="token string">&#39;DartFunction&#39;</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">HTFunction</span> function<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>int a<span class="token punctuation">,</span> int b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// must convert the return type here to let dart know its return value type.</span>
      <span class="token keyword">return</span> function<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">as</span> int<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后，当你在脚本中传递 <strong>add</strong> 函数时，就可以获得一个符合定义的 Dart 函数。</p><p>下面是一个例子。我们定义了另一个 Dart 函数。它需要一个函数作为传入的参数。此时我们就可以将刚才在脚本中定义的 <strong>add</strong> 函数直接传给他。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">typedef</span> <span class="token class-name">DartFunction</span> <span class="token operator">=</span> int <span class="token class-name">Function</span><span class="token punctuation">(</span>int a<span class="token punctuation">,</span> int b<span class="token punctuation">)</span><span class="token punctuation">;</span>

int <span class="token function">hetuAdd</span><span class="token punctuation">(</span><span class="token class-name">DartFunction</span> func<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> func <span class="token operator">=</span> hetu<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;getFunc&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于解包装函数，我们通常使用如下的定义：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">typedef</span> <span class="token class-name">HTExternalFunctionTypedef</span> <span class="token operator">=</span> <span class="token class-name">Function</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token class-name">HTFunction</span> hetuFunction<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="自动绑定工具" tabindex="-1"><a class="header-anchor" href="#自动绑定工具" aria-hidden="true">#</a> 自动绑定工具</h3>`,21),f={href:"https://github.com/rockingdice",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/CJChen98",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/hetu-script/hetu-script-autobinding",target:"_blank",rel:"noopener noreferrer"},A={href:"https://github.com/hetu-script/hetu-script-autobinding/issues",target:"_blank",rel:"noopener noreferrer"};function H(T,P){const t=e("ExternalLinkIcon"),o=e("RouterLink");return l(),i("div",null,[k,n("ul",null,[d,n("li",null,[n("p",null,[s("你需要写一个针对这个 Dart class 的 "),n("a",v,[s("extension"),a(t)]),s("，提供两个方法："),m,s("。 这是为了让解释器可以以某种类似反射的方法获取 Dart 对象的成员。")])]),n("li",null,[n("p",null,[s("你需要通过继承 "),g,s(" 类定义一个外部类，包含 "),b,s(" 等函数。这个外部类需要使用解释器的 "),a(o,{to:"/zh-Hans/api_reference/dart/"},{default:u(()=>[y]),_:1}),s(" 方法进行绑定，从而让解释器可以访问这个类的静态成员，以及其构造函数。")])]),h]),w,n("p",null,[s("感谢"),n("a",f,[s("rockingdice"),a(t)]),s("和"),n("a",x,[s("CJChen98"),a(t)]),s("的贡献，我们现在有一个自动化工具 "),n("a",_,[s("hetu-script-autobinding"),a(t)]),s(" 用来生成一个 Dart 类的完整外部类绑定定义。")]),n("p",null,[n("em",null,[s("这个工具由第三方开发者贡献和更新。我们不能保证它一定适用于最新版本的 Hetu，有关问题请在对应的 repository "),n("a",A,[s("发起 issue"),a(t)]),s(" 。")])])])}const N=c(r,[["render",H],["__file","D:/_dev/hetu-script/docs/docs/.vuepress/.temp/pages/zh-Hans/guide/binding/index.html.vue"]]);export{N as default};
