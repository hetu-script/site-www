import{_ as t,M as o,p as i,q as p,R as a,t as n,N as l,a1 as s}from"./framework-5866ffd3.js";const c={},r=s(`<h1 id="implementation-detail" tabindex="-1"><a class="header-anchor" href="#implementation-detail" aria-hidden="true">#</a> Implementation detail</h1><p>Hetu&#39;s bytecode implementation has some inexplicit rules. Normally they won&#39;t affect language users. We listed them here in case you are interested or encountered some bytecode issues.</p><h2 id="enum" tabindex="-1"><a class="header-anchor" href="#enum" aria-hidden="true">#</a> Enum</h2><p>The enum is compiled into class, so there&#39;s no &#39;enum&#39; object exists in runtime.</p><p>For example, a enum declaration in Hetu:</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">enum</span> <span class="token class-name">Country</span> <span class="token punctuation">{</span>
  kHungary<span class="token punctuation">,</span>
  kJapan<span class="token punctuation">,</span>
  kIndia<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>is compiled into:</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Country</span> <span class="token punctuation">{</span>
  <span class="token keyword">final</span> _name<span class="token punctuation">;</span>
  construct <span class="token function">_</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    _name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  fun toString <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string-literal"><span class="token string">&#39;Country.</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">_name</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span>
  <span class="token keyword">static</span> <span class="token keyword">final</span> kHungary <span class="token operator">=</span> <span class="token class-name">Country</span><span class="token punctuation">.</span><span class="token function">_</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;kHungary&#39;</span></span><span class="token punctuation">)</span>
  <span class="token keyword">static</span> <span class="token keyword">final</span> kJapan <span class="token operator">=</span> <span class="token class-name">Country</span><span class="token punctuation">.</span><span class="token function">_</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;kJapan&#39;</span></span><span class="token punctuation">)</span>
  <span class="token keyword">static</span> <span class="token keyword">final</span> kIndia <span class="token operator">=</span> <span class="token class-name">Country</span><span class="token punctuation">.</span><span class="token function">_</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;kIndia&#39;</span></span><span class="token punctuation">)</span>
  <span class="token keyword">static</span> <span class="token keyword">final</span> values <span class="token operator">=</span> <span class="token punctuation">[</span>kHungary<span class="token punctuation">,</span> kJapan<span class="token punctuation">,</span> kIndia<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>in bytecode.</p><p>However, a external Dart enum will exist as a standalone object in the runtime.</p><h2 id="automatic-semicolon-insertion" tabindex="-1"><a class="header-anchor" href="#automatic-semicolon-insertion" aria-hidden="true">#</a> Automatic semicolon insertion</h2>`,11),u={href:"https://en.wikibooks.org/wiki/JavaScript/Automatic_semicolon_insertion",target:"_blank",rel:"noopener noreferrer"},d=s(`<p>If a language has no semicolon and in the same time it also allows for multiline expression. Then there will be times that ambiguity happens.</p><p>For example:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isReady<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// a semicolon will always be inserted here automatically by Javascript engine</span>
  <span class="token punctuation">{</span>
    <span class="token comment">// fields</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// some codes</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If there&#39;s no ASI, we would never know if you want to return the object after it, or you just want to start a new line after the return keyword.</p><p>Similar things also happens when you started a line with brackets, and the interpreter will not knowing if you want to get the subscript value out of the object in the previous line.</p><p>In Hetu script, the ASI is slightly different from Javascript&#39;s approach (which almost will always add the semicolon at the end of a line).</p><p>We would only add a &#39;end of statement mark&#39; after a line, if the next line starts with one of these tokens:</p><p>&#39;{&#39;, &#39;(&#39;, &#39;[&#39;, &#39;++&#39;, &#39;--&#39;</p><p><strong>AND</strong> this line is not an <strong>UNFINISHED</strong> line, which ends with one of these tokens:</p><p>&#39;!&#39;, &#39;*&#39;, &#39;/&#39;, &#39;%&#39;, &#39;+&#39;, &#39;-&#39;, &#39;&lt;&#39;, &#39;&lt;=&#39;, &#39;&gt;&#39;, &#39;&gt;=&#39;, &#39;=&#39;, &#39;!=&#39;, &#39;??&#39;, &#39;&amp;&amp;&#39;, &#39;||&#39;, &#39;=&#39;, &#39;+=&#39;, &#39;-=&#39;, &#39;*=&#39;, &#39;/=&#39;, &#39;??=&#39;, &#39;.&#39;, &#39;(&#39;, &#39;{&#39;, &#39;[&#39;, &#39;,&#39;, &#39;:&#39;, &#39;-&gt;&#39;, &#39;=&gt;&#39;.</p><p>Besides, Hetu will also add a &#39;end of statement mark&#39; after return if there&#39;s a new line immediately after it.</p><p>So if you would like to return the value, remember to make the left bracket same line with the return.</p><p>And if you want to write function definition, remember to make the left bracket same line with the function parameters.</p><h2 id="recursive-import" tabindex="-1"><a class="header-anchor" href="#recursive-import" aria-hidden="true">#</a> Recursive import</h2><p>For <strong>ResourceType.hetuModule</strong>, recursive import (i.e. A import from B in the meantime, B import from A) is allowed. However, for <strong>ResourceType.hetuScript</strong>, recursive import would cause stack overflow errors. <strong>You have to manually avoid recursive import in &#39;*.hts&#39; files.</strong></p><h2 id="for-in-loop" tabindex="-1"><a class="header-anchor" href="#for-in-loop" aria-hidden="true">#</a> for...in Loop</h2><p>Loop statement <strong>for...in</strong> in Hetu is basically a syntax sugar using iterator. That is to say, a code like:</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>will be compiled into:</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> __iter0 <span class="token operator">=</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>iterator
<span class="token keyword">while</span> <span class="token punctuation">(</span>__iter0<span class="token punctuation">.</span><span class="token function">moveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> i <span class="token operator">=</span> __iter0<span class="token punctuation">.</span>current
  <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It&#39;s not nessesarily a Dart iterator. It&#39;s possible to define a object in Hetu that has a <strong>iterator</strong> as its member, while this iterator object has a <strong>moveNext()</strong> method, for this to work.</p><h2 id="closure" tabindex="-1"><a class="header-anchor" href="#closure" aria-hidden="true">#</a> Closure</h2><p>In Hetu, invoke a function will always create a new namespace. And within a namespace, you can access the declarations within its upper namespace.</p><p>This kind of implementation likes Javascript&#39;s style, it is different from C++/Rust, which provide lexical closure, that you can use <strong>move</strong> and value arguments to create a independent namespace while also capture outter declarations.</p>`,24);function k(m,h){const e=o("ExternalLinkIcon");return i(),p("div",null,[r,a("p",null,[n("Automatic semicolon insertion (ASI) is a technique in programming languages that semicolon is optional. "),a("a",u,[n("Click here for more information"),l(e)]),n(".")]),d])}const f=t(c,[["render",k],["__file","index.html.vue"]]);export{f as default};
