import{f as a}from"./app.daf41253.js";import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";const s={},e=a(`<h1 id="variable" tabindex="-1"><a class="header-anchor" href="#variable" aria-hidden="true">#</a> Variable</h1><p>Variable is declared with &#39;var&#39;, &#39;final&#39;, &#39;late&#39;, &#39;const&#39;. The type annotation and initialize expression is optional.</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token keyword">var</span> person
<span class="token keyword">var</span> fineStructureConstant<span class="token punctuation">:</span> num <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">137</span>
<span class="token keyword">final</span> isTimeTravelSuccessful<span class="token punctuation">:</span> bool <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token keyword">final</span> skill<span class="token punctuation">:</span> <span class="token class-name">List</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;attack&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;defense&#39;</span></span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="const" tabindex="-1"><a class="header-anchor" href="#const" aria-hidden="true">#</a> Const</h2><p>You can declare a constant literal int/float/string value by keyword &#39;const&#39;. The value will be stored in a global set to slightly increase performance.</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token keyword">const</span> pi <span class="token operator">=</span> <span class="token number">3.1415926</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Constant expression is not computed by default, even the identifier is also a constant. So if the const declaration&#39;s initializer is a expression, then it is equal to final declaration.</p><p>However, you can turn on constant interpreter by config after version 0.4.0 of Hetu.</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token comment">// Equal to final pi2 = 3.1415926 * 2</span>
<span class="token comment">// at default configuration</span>
<span class="token keyword">const</span> pi2 <span class="token operator">=</span> <span class="token number">3.1415926</span> <span class="token operator">*</span> <span class="token number">2</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="late-finalize" tabindex="-1"><a class="header-anchor" href="#late-finalize" aria-hidden="true">#</a> Late finalize</h2><p>For var &amp; final declaration, you will get a null value before you initialize it.</p><p>You can declare a <strong>immutable</strong> variable while not initialize it immediately, by using keyword <strong>late</strong>.</p><p>It will become immutable after the first assignment. And you will get a runtime error if you try to get its value.</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>late a
<span class="token comment">// print(a) // Error: [a] is not initialized yet.</span>
a <span class="token operator">=</span> <span class="token number">42</span>
<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
a <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;dragon&#39;</span></span> <span class="token comment">// Error: [a] is immutable.</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="shadowing" tabindex="-1"><a class="header-anchor" href="#shadowing" aria-hidden="true">#</a> Shadowing</h2><p>It is possible to shadow a variable by defining another variable with the same name.</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">42</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;yay!&#39;</span></span> <span class="token comment">/// not an error, this is another variable</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="delete" tabindex="-1"><a class="header-anchor" href="#delete" aria-hidden="true">#</a> Delete</h2><p>It is possible to delete a variable using &#39;delete&#39; keyword.</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">42</span>
delete a
<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// error: a is undefined!</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="destructuring-declaration" tabindex="-1"><a class="header-anchor" href="#destructuring-declaration" aria-hidden="true">#</a> Destructuring declaration</h2><p>You <strong>cannot</strong> define multiple variables at the same time like you would in C++ and Java. This is for the sake of clarity.</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token keyword">var</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token comment">// error</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>However, you can use <strong>destructuring declaration</strong> to assign multiple values from an Iterable/struct/map.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// a = 1, b = 2, c = 3</span>
<span class="token keyword">var</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">7</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// x = 6, y = 7</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>You can <strong>omit</strong> a declaration when you use destructuring declaration on a iterable.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token punctuation">[</span>_<span class="token punctuation">,</span> _<span class="token punctuation">,</span> z<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// z = 3</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Destructuring declarations have to have a initializer and have to be initialized immediately, hence you can only use them within a script or a function body.</p>`,28);function t(p,o){return e}var i=n(s,[["render",t]]);export{i as default};
