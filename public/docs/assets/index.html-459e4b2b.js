import{_ as e,M as t,p,q as o,R as i,t as n,N as c,V as l,a1 as s}from"./framework-5866ffd3.js";const u={},r=s(`<h1 id="control-flow" tabindex="-1"><a class="header-anchor" href="#control-flow" aria-hidden="true">#</a> Control flow</h1><p>Hetu has while, do loops, and classic for(init;condition;increment) and for...in loops. As well as when statement, which works like switch.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>fun main <span class="token punctuation">{</span>
  <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">++</span>i
    when <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token number">0</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;even:&#39;</span></span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
      <span class="token number">1</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;odd:&#39;</span></span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
      <span class="token keyword">else</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;never going to happen.&#39;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">break</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="if" tabindex="-1"><a class="header-anchor" href="#if" aria-hidden="true">#</a> If</h2><p><strong>if</strong> statement&#39;s branches could be a single statement without brackets.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>if</strong> can also be an expression which will have a value, in this case else branch is not omitable.</p><h2 id="loop" tabindex="-1"><a class="header-anchor" href="#loop" aria-hidden="true">#</a> Loop</h2><p>Syntax for loop statement is the same to most C++/Java like languages.</p><p>You can use break and continue within them.</p><h3 id="while" tabindex="-1"><a class="header-anchor" href="#while" aria-hidden="true">#</a> While</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="do" tabindex="-1"><a class="header-anchor" href="#do" aria-hidden="true">#</a> Do</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">do</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>&#39;do&#39; statement&#39;s &#39;while&#39; part is optional, if omitted, it will become a anonymous code block. It&#39;s kind of like an anonymous function that immediately calls.</p><h3 id="for" tabindex="-1"><a class="header-anchor" href="#for" aria-hidden="true">#</a> For</h3><p>&#39;for&#39; statement&#39;s expr must be separated with &#39;;&#39;.</p><p>The expression itself is optional. If you write &#39;for ( ; ; )&#39;, it will be the same to &#39;while (true)&#39;</p><p>When use for...in, the loop will iterate through the keys of a list.</p><p>When use for...of, the loop will iterate through the values of a struct literal/Dart Map.</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>init<span class="token punctuation">;</span> condition<span class="token punctuation">;</span> increment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item of obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="when" tabindex="-1"><a class="header-anchor" href="#when" aria-hidden="true">#</a> When</h2><p>When is the substitue for &#39;switch&#39; in older programming languages, we change its name to indicate more complex usages.</p><p>&#39;when&#39; statement&#39;s condition is optional. If not provided, the interpreter will check the cases and jump to the first branch if the expression evaled as true, just like a if else statement.</p>`,24),d=s(`<p>&#39;when&#39; statement&#39;s case could be non-const expression or variables;</p><p>&#39;when&#39; statement&#39;s body must be enclosed in curly brackets. However, the case branch could be a single statement without brackets;</p><p>&#39;when&#39; statement&#39;s else branch is optional.</p><p>If you want to match multiple values in one branch, use comma expression.</p><p>If you want to check if an iterable/object contains the value, use in/of expression.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>final i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">when</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token number">0</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;number: 0&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;prime: \${i}&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;square: \${i}&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;other: \${i}&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function k(v,m){const a=t("RouterLink");return p(),o("div",null,[r,i("p",null,[n("However for when statement's cases, interpreter won't "),c(a,{to:"/en-US/grammar/strict_mode/#truth-value"},{default:l(()=>[n("inexplicitly convert non-boolean values")]),_:1}),n(".")]),d])}const b=e(u,[["render",k],["__file","index.html.vue"]]);export{b as default};
