import{d as i}from"./app.d4ded6d5.js";import{_ as a}from"./plugin-vue_export-helper.21dcd24c.js";const e={},n=i(`<h1 id="primitive-buildin-types-and-classes" tabindex="-1"><a class="header-anchor" href="#primitive-buildin-types-and-classes" aria-hidden="true">#</a> Primitive (buildin) types and classes</h1><ul><li>null</li><li>bool</li><li>int</li><li>float (i.e. double is Dart)</li><li>String</li><li>List&lt;dynamic&gt;</li><li>Set&lt;dynamic&gt;</li><li>Map&lt;dynamic, dynamic&gt;</li><li>Function</li></ul><p>There&#39;s no literal syntax for Set &amp; Map, you have to create them by using constructors.</p><h2 id="big-integers" tabindex="-1"><a class="header-anchor" href="#big-integers" aria-hidden="true">#</a> Big integers</h2><p>The builtin integers in script are int32, which range from -2,147,483,648 to 2,147,483,647. This is due to the limitation of the runtime.js of Dart.</p><p>To manipulate bigger numbers, you can use preincluded class BigInt.</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token keyword">final</span> bi <span class="token operator">=</span> <span class="token class-name">BigInt</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;9223372036854775807&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>`,7);function s(t,l){return n}var c=a(e,[["render",s]]);export{c as default};
