import{r as a,o as s,c as o,a as e,b as i,F as r,e as n,d as p}from"./app.e80a62a0.js";import{_ as l}from"./plugin-vue_export-helper.21dcd24c.js";const c={},u=e("h1",{id:"automatic-semicolon-insertion",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#automatic-semicolon-insertion","aria-hidden":"true"},"#"),n(" Automatic semicolon insertion")],-1),m=n("Automatic semicolon insertion (ASI) is a technique in programming languages that semicolon is optional. "),h={href:"https://en.wikibooks.org/wiki/JavaScript/Automatic_semicolon_insertion",target:"_blank",rel:"noopener noreferrer"},d=n("Click here for more information"),f=n("."),k=p(`<p>If a language has no semicolon and in the same time it also allows for multiline expression. Then there will be times that ambiguity happens.</p><p>For example:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isReady<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// a semicolon will always be inserted here automatically by javascript engine</span>
  <span class="token punctuation">{</span>
    <span class="token comment">// fields</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// some codes</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>If there&#39;s no ASI, we would never know if you want to return the object after it, or you just want to start a new line after the return keyword.</p><p>Similar things also happens when you started a line with brackets, and the interpreter will not knowing if you want to get the subscript value out of the object in the previous line.</p><p>In Hetu script, the ASI is slightly different from Javascript&#39;s approach (which almost will always add the semicolon at the end of a line).</p><p>We would only add a &#39;end of statement mark&#39; after a line, if the next line starts with one of these tokens:</p><p>&#39;{&#39;, &#39;(&#39;, &#39;[&#39;, &#39;++&#39;, &#39;--&#39;</p><p><strong>AND</strong> this line is not an <strong>UNFINISHED</strong> line, which ends with one of these tokens:</p><p>&#39;!&#39;, &#39;*&#39;, &#39;/&#39;, &#39;%&#39;, &#39;+&#39;, &#39;-&#39;, &#39;&lt;&#39;, &#39;&lt;=&#39;, &#39;&gt;&#39;, &#39;&gt;=&#39;, &#39;=&#39;, &#39;!=&#39;, &#39;??&#39;, &#39;&amp;&amp;&#39;, &#39;||&#39;, &#39;=&#39;, &#39;+=&#39;, &#39;-=&#39;, &#39;*=&#39;, &#39;/=&#39;, &#39;??=&#39;, &#39;.&#39;, &#39;(&#39;, &#39;{&#39;, &#39;[&#39;, &#39;,&#39;, &#39;:&#39;, &#39;-&gt;&#39;, &#39;=&gt;&#39;.</p><p>Besides, Hetu will also add a &#39;end of statement mark&#39; after return if there&#39;s a new line immediately after it.</p><p>So if you would like to return the value, remember to make the left bracket same line with the return.</p><p>And if you want to write function definition, remember to make the left bracket same line with the function parameters.</p>`,13);function w(b,g){const t=a("ExternalLinkIcon");return s(),o(r,null,[u,e("p",null,[m,e("a",h,[d,i(t)]),f]),k],64)}var v=l(c,[["render",w]]);export{v as default};
