import{_ as t,M as o,p as i,q as p,R as s,t as n,N as c,V as l,a1 as a}from"./framework-5866ffd3.js";const r={},u=a('<h1 id="package-module" tabindex="-1"><a class="header-anchor" href="#package-module" aria-hidden="true">#</a> Package &amp; Module</h1><h2 id="source-code-module" tabindex="-1"><a class="header-anchor" href="#source-code-module" aria-hidden="true">#</a> Source code module</h2><p>You can use <strong>import</strong> declaration within your code to include other source. The interpreter will interpret those imported sources first.</p><h2 id="bytecode-module" tabindex="-1"><a class="header-anchor" href="#bytecode-module" aria-hidden="true">#</a> Bytecode module</h2><p>You can use <strong>compile()</strong> to make a single file bytecode module. The compiler with automatically compile every other source that the code imported.</p><h2 id="resource-context" tabindex="-1"><a class="header-anchor" href="#resource-context" aria-hidden="true">#</a> Resource context</h2><p>If a source contains import statement, the parser will try to fetch another source content by the import path through a helper class <strong>HTResourceContext</strong>. The default <strong>HTResourceContext</strong> provided by the Interpreter is <strong>HTOverlayContext</strong>, it will not handle physical files and you need to manually add String content into the context before you run the script for it to import from.</p><h2 id="resource-type" tabindex="-1"><a class="header-anchor" href="#resource-type" aria-hidden="true">#</a> Resource type</h2><p>Hetu script file have 3 way to interpret, controlled by the <strong>ResourceType type</strong> parameter in the eval method of the Interpreter class or the extension of the source file.</p><ul><li><p>When <strong>ResourceType</strong> is not provided in interpreter&#39;s &#39;eval&#39; method, interpreter will evaluate the string provided as <strong>ResourceType.hetuLiteralCode</strong>. Other than the code use <strong>global</strong> as its namespace. It is the same to <strong>ResourceType.hetuScript</strong>.</p></li><li><p>For <strong>ResourceType.hetuScript</strong>, the source file is organized like a Javascript, Python and Lua file. It has its own namespace. It may contain any expression and control statement that is allowed in a function body (including nested function and class declaration). And every expression is immediately evaluated.</p></li><li><p>For <strong>ResourceType.hetuModule</strong>, the source file is organized like a C++, Java or Dart app. It only contains import statement and declarations(variable, function and class). The top level variables are lazily initialized (initialize when first used).</p></li></ul><p>When using <strong>evalFile</strong> method on the interpreter, the source type is inferred from the extension of the file name: &#39;*.hts&#39; is <strong>ResourceType.hetuScript</strong>, and &#39;*.ht&#39; is <strong>ResourceType.hetuModule</strong>.</p><h2 id="import-a-pre-compiled-binary-module" tabindex="-1"><a class="header-anchor" href="#import-a-pre-compiled-binary-module" aria-hidden="true">#</a> Import a pre-compiled binary module</h2>',12),d=s("strong",null,"have to",-1),m=a(`<div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;module:calculate&#39;</span></span> <span class="token operator">as</span> calculate<span class="token punctuation">;</span>

<span class="token keyword">final</span> result <span class="token operator">=</span> calculate<span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, to do so, you have to load the bytecode before you can import it in your script. This is a example to pre-load a pre-compiled binary file:</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:io&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:hetu_script/hetu_script.dart&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:hetu_script_dev_tools/hetu_script_dev_tools.dart&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">final</span> sourceContext <span class="token operator">=</span> <span class="token class-name">HTFileSystemResourceContext</span><span class="token punctuation">(</span>root<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;example/script/&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">final</span> hetu <span class="token operator">=</span> <span class="token class-name">Hetu</span><span class="token punctuation">(</span>sourceContext<span class="token punctuation">:</span> sourceContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
  hetu<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">final</span> binaryFile <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;example/script/module.out&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">final</span> bytes <span class="token operator">=</span> binaryFile<span class="token punctuation">.</span><span class="token function">readAsBytesSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  hetu<span class="token punctuation">.</span><span class="token function">loadBytecode</span><span class="token punctuation">(</span>bytes<span class="token punctuation">:</span> bytes<span class="token punctuation">,</span> module<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;calculate&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  hetu<span class="token punctuation">.</span><span class="token function">evalFile</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;import_binary_module.hts&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="import-a-json-file" tabindex="-1"><a class="header-anchor" href="#import-a-json-file" aria-hidden="true">#</a> Import a JSON file</h2><p>Sometimes we need to import a non-hetu source in your code. For example, if you imported a JSON file, you will get a HTStruct object from it. Because the syntax of a JSON is fully compatible with Hetu&#39;s struct object.</p><p>The two implementation of HTResourceContext (HTFileSystemResourceContext &amp; HTAssetResourceContext) will automatically include json and json5 file extensions, and you can import them as normal source files.</p><p>Example code (dart part):</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:hetu_script/hetu_script.dart&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:hetu_script_dev_tools/hetu_script_dev_tools.dart&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">final</span> sourceContext <span class="token operator">=</span> <span class="token class-name">HTFileSystemResourceContext</span><span class="token punctuation">(</span>root<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;example/script&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">final</span> hetu <span class="token operator">=</span> <span class="token class-name">Hetu</span><span class="token punctuation">(</span>sourceContext<span class="token punctuation">:</span> sourceContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
  hetu<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  hetu<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;&#39;&#39;
    import &#39;values.json&#39; as json
    print(json.name) // use json value like a struct
  &#39;&#39;&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that you <strong>have to</strong> provide a alias name for this imported json file.</p>`,9);function k(h,v){const e=o("RouterLink");return i(),p("div",null,[u,s("p",null,[n("You can "),c(e,{to:"/en-US/guide/command_line_tool/#compile"},{default:l(()=>[n("pre-compiled a hetu script package")]),_:1}),n(" into a binary module for better performance. If you have a such module. You can import it by using special prefix in import path. Note that for anlysis purpose, you "),d,n(" provide a alias name for this imported module.")]),m])}const y=t(r,[["render",k],["__file","index.html.vue"]]);export{y as default};
