import{_ as t,M as r,p as i,q as l,R as a,t as e,N as o,a1 as n}from"./framework-5866ffd3.js";const d={},p=n(`<h1 id="命令行工具" tabindex="-1"><a class="header-anchor" href="#命令行工具" aria-hidden="true">#</a> 命令行工具</h1><p>河图提供了一个命令行工具来辅助测试和开发。</p><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><p>只需要使用下面的命令，在你的机器上安装一个全局 Dart 脚本，即可使用这个命令行工具：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>dart pub global activate hetu_script_dev_tools
// or you can use a git url or local path:
// dart pub global activate --source path G:\\_dev\\hetu-script\\dev-tools
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装之后，你就可以在任意目录下使用 <strong>hetu</strong> 命令。</p>`,6),c={href:"https://dart.dev/tools/pub/cmd/pub-global",target:"_blank",rel:"noopener noreferrer"},u=n(`<h2 id="repl" tabindex="-1"><a class="header-anchor" href="#repl" aria-hidden="true">#</a> REPL</h2><p>如果执行 <strong>hetu</strong> 命令时没有提供任何参数，将会进入 <strong>REPL</strong> 模式。</p><p>REPL 的意思是 Read–Eval–Print Loop。在这个模式下，你可以直接键入一个脚本表达式或者语句，它的值将会立即被打印到屏幕上。</p><p>如果你需要多行输入，使用 &#39;\\&#39; 来结束一行。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token operator">&gt;&gt;&gt;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">42</span>
<span class="token operator">&gt;&gt;&gt;</span>a
<span class="token number">42</span>
<span class="token operator">&gt;&gt;&gt;</span>fun hello <span class="token punctuation">{</span>\\
<span class="token keyword">return</span> a <span class="token punctuation">}</span>
<span class="token operator">&gt;&gt;&gt;</span>hello
<span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">any</span> <span class="token comment">// repl print</span>
<span class="token operator">&gt;&gt;&gt;</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">42</span> <span class="token comment">// repl print</span>
<span class="token operator">&gt;&gt;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="run" tabindex="-1"><a class="header-anchor" href="#run" aria-hidden="true">#</a> run</h2><p>运行一个字符串或者一个字节码形式的脚本代码。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>hetu run [path]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="format" tabindex="-1"><a class="header-anchor" href="#format" aria-hidden="true">#</a> format</h2><p>格式化一个字符串形式的脚本代码，并且另存到 --out 选项所指定的路径。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>hetu format [path] [option]
      --out(-o) [outpath]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="compile" tabindex="-1"><a class="header-anchor" href="#compile" aria-hidden="true">#</a> compile</h2><p>将一个字符串形式的脚本编译为字节码形式的代码。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>hetu compile [path] [output_path] [option]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="analyze" tabindex="-1"><a class="header-anchor" href="#analyze" aria-hidden="true">#</a> analyze</h2><p>对一个字符串形式的脚本代码进行静态分析，然后打印所有的警告或者错误。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>hetu analyze [path]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,17);function h(v,m){const s=r("ExternalLinkIcon");return i(),l("div",null,[p,a("p",null,[e("(关于 Dart 这个全局脚本的用法，可以参考 "),a("a",c,[e("dart pub global activate"),o(s)]),e(")。")]),u])}const b=t(d,[["render",h],["__file","index.html.vue"]]);export{b as default};
