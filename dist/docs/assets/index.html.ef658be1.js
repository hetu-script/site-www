import{f as s}from"./app.321bd41d.js";import{_ as e}from"./plugin-vue_export-helper.21dcd24c.js";const n={},a=s(`<h1 id="identifier-keywords" tabindex="-1"><a class="header-anchor" href="#identifier-keywords" aria-hidden="true">#</a> Identifier &amp; keywords</h1><p>Identifiers (sometimes called symbols) are the names of classes, functions, types, members and fields. In common situations, you can only use letters or characters from any language, plus underscore and dollor sign.</p><h2 id="explicitly-define-an-identifier" tabindex="-1"><a class="header-anchor" href="#explicitly-define-an-identifier" aria-hidden="true">#</a> Explicitly define an identifier</h2><p>You can get a literal identifier with a pair grave accent mark. In this way, you can use any possible characters for its name.</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  \`name<span class="token operator">-</span>#<span class="token number">42</span>\u{1F34E}\`<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;aleph&#39;</span></span> <span class="token comment">// it&#39;s legal for a field name.</span>
<span class="token punctuation">}</span>

<span class="token function">print</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>\`name<span class="token operator">-</span>#<span class="token number">42</span>\u{1F34E}\`<span class="token punctuation">)</span> <span class="token comment">// &#39;aleph&#39;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="keywords" tabindex="-1"><a class="header-anchor" href="#keywords" aria-hidden="true">#</a> Keywords</h2><p>You cannot use reserved keywords as identifiers.</p><p>The full list of current keywords are:</p><p><strong>null, true, false, void<sup>1</sup>, type<sup>1</sup>, import<sup>1</sup>, export<sup>1</sup>, from<sup>1</sup>, any<sup>1</sup>, unknown<sup>12</sup>, never<sup>12</sup>, var, final, const, def<sup>2</sup>, delete<sup>2</sup>, typeof, namespace, class, enum, fun, struct, this, super, abstract, override<sup>2</sup>, external, static, extends, implements<sup>2</sup>, with<sup>2</sup>, construct, factory, get, set, async<sup>2</sup>, await<sup>2</sup>, break, continue, return, for, in, of<sup>1</sup>, if, else, while, do, when, is, as</strong></p><p>1: These keywords are <strong>contextual</strong>. they only used in specific places, hence can be used as normal identifiers.</p><p>2: These keywords have no really effect for now, they are reserved for future development.</p>`,11);function r(t,p){return a}var u=e(n,[["render",r]]);export{u as default};
