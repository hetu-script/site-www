import{_ as n,p as a,q as s,a1 as e}from"./framework-3f81730e.js";const t={},p=e(`<h1 id="严格模式" tabindex="-1"><a class="header-anchor" href="#严格模式" aria-hidden="true">#</a> 严格模式</h1><p>可以通过修改 Hetu 解释器对象上的 config 属性来指定以某些非严格模式进行解释。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> hetu <span class="token operator">=</span> <span class="token class-name">Hetu</span><span class="token punctuation">(</span>
  config<span class="token punctuation">:</span> <span class="token class-name">InterpreterConfig</span><span class="token punctuation">(</span>
    allowVariableShadowing<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    allowImplicitVariableDeclaration<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    allowImplicitNullToZeroConversion<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    allowImplicitEmptyValueToFalseConversion<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="变量名覆盖" tabindex="-1"><a class="header-anchor" href="#变量名覆盖" aria-hidden="true">#</a> 变量名覆盖</h2><p>当 config.allowVariableShadowing == true 时，你可以在同一个函数的命名空间中声明一个相同名字的变量，来覆盖之前的声明。</p><p>这个选项默认是打开的。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">42</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;yay!&#39;</span></span> <span class="token comment">/// not an error, this is another variable</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="隐式变量定义" tabindex="-1"><a class="header-anchor" href="#隐式变量定义" aria-hidden="true">#</a> 隐式变量定义</h2><p>如果允许隐式变量定义，可以写出一些较为简洁，但有时候会令人难以看懂的代码。河图本身并不鼓励这种代码风格，但使用者可以通过 config 上的开关主动使用这种风格。在这种风格下，对不存在的标识符赋值，将会自动创建新的变量：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// new variable will be created when assigning to a non-exist id.</span>
a <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>

<span class="token comment">// you can omit the declaration keyword in for statement,</span>
<span class="token comment">// if allowImplicitVariableDeclaration is true.</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// you can create a variable in expression,</span>
<span class="token comment">// and use it later.</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>err <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="空值和零" tabindex="-1"><a class="header-anchor" href="#空值和零" aria-hidden="true">#</a> 空值和零</h2><p>当 config.allowImplicitNullToZeroConversion == true 时，null 可以被隐式转换为 0：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>final obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token operator">++</span>obj<span class="token punctuation">.</span>count <span class="token comment">// obj = { count: 1 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="布尔值" tabindex="-1"><a class="header-anchor" href="#布尔值" aria-hidden="true">#</a> 布尔值</h2><p>当 config.allowImplicitEmptyValueToFalseConversion == true 时，下列表达式的值，如果为人类主观意义上的空值（包括空字符串等等，但不包括 0）可以被隐式转换为布尔值。</p><p>1, if (expr)</p><p>2, (expr) ? //... : //...</p><p>2, do { //... } while (expr)</p><p>3, while (expr)</p><p>4, expr1 &amp;&amp; expr2</p><p>5, expr1 || expr2</p><p>布尔值隐式转换的规则如下：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">/// inexpicit type conversion for truthy values</span>
bool <span class="token function">_truthy</span><span class="token punctuation">(</span><span class="token keyword">dynamic</span> condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>allowImplicitEmptyValueToFalseConversion<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>condition <span class="token operator">==</span> <span class="token boolean">false</span>
        condition <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span>
        condition <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&#39;&#39;</span></span> <span class="token operator">||</span>
        condition <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&#39;false&#39;</span></span> <span class="token operator">||</span>
        <span class="token punctuation">(</span>condition <span class="token operator">is</span> <span class="token class-name">Iterable</span> <span class="token operator">&amp;&amp;</span> condition<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span> <span class="token operator">||</span>
        <span class="token punctuation">(</span>condition <span class="token operator">is</span> <span class="token class-name">Map</span> <span class="token operator">&amp;&amp;</span> condition<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span> <span class="token operator">||</span>
        <span class="token punctuation">(</span>condition <span class="token operator">is</span> <span class="token class-name">HTStruct</span> <span class="token operator">&amp;&amp;</span> condition<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> condition<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>除了上述情况之外，其他场合并不会进行隐式类型转换。</strong></p>`,24),o=[p];function i(c,l){return a(),s("div",null,o)}const u=n(t,[["render",i],["__file","D:/_dev/hetu-script/docs/docs/.vuepress/.temp/pages/zh-Hans/grammar/strict_mode/index.html.vue"]]);export{u as default};
