import{_ as e,M as p,p as o,q as i,R as s,t as n,N as c,V as l,a1 as a}from"./framework-5866ffd3.js";const r={},u=a(`<h2 id="hetu-script" tabindex="-1"><a class="header-anchor" href="#hetu-script" aria-hidden="true">#</a> hetu_script</h2><p>使用 dart pub add 命令来安装最新版本：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>dart pub add hetu_script
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于 Flutter 项目，使用 flutter 版本的命令行工具：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flutter pub add hetu_script
flutter pub add hetu_script_flutter
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hetu-script-dev-tools" tabindex="-1"><a class="header-anchor" href="#hetu-script-dev-tools" aria-hidden="true">#</a> hetu_script_dev_tools</h2><p>如果你需要在代码中，使用 import 语句导入你的文件系统上的另一个代码文件的内容。需要安装这个包。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>dart pub add hetu_script_dev_tools
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后你需要使用 <strong>HTFileSystemResourceContext</strong> 辅助类, 在创建解释器时作为参数传入，替换掉默认的 sourceContext。</p><p><strong>HTFileSystemResourceContext</strong> 的 root 参数是代码文件存放的根目录，如果不指定，会使用当前项目的根目录。</p><p>之后，你就可以使用解释器上的 <strong>evalFile()</strong> 方法来直接载入一个代码文件。你可以省略掉路径中 root 的部分。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:hetu_script/hetu_script.dart&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:hetu_script_dev_tools/hetu_script_dev_tools.dart&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">final</span> sourceContext <span class="token operator">=</span> <span class="token class-name">HTFileSystemResourceContext</span><span class="token punctuation">(</span>root<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;../../script/&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">final</span> hetu <span class="token operator">=</span> <span class="token class-name">Hetu</span><span class="token punctuation">(</span>sourceContext<span class="token punctuation">:</span> sourceContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
  hetu<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">final</span> result <span class="token operator">=</span> hetu<span class="token punctuation">.</span><span class="token function">evalFile</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;import_test1.ht&#39;</span></span><span class="token punctuation">,</span> invoke<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;main&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在代码中通过 import 语句引入其他代码文件的例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">&#39;hello.ht&#39;</span> <span class="token keyword">as</span> h

fun main <span class="token punctuation">{</span>
  <span class="token keyword">return</span> h<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),d=s("strong",null,"REPL",-1),k=a(`<h2 id="hetu-script-flutter" tabindex="-1"><a class="header-anchor" href="#hetu-script-flutter" aria-hidden="true">#</a> hetu_script_flutter</h2><p>对于想要在 Flutter APP 中引入作为 assets 资源文件的脚本的需求，可以安装这个包。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>dart pub add hetu_script_flutter
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">assets</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> scripts/main.ht
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>和 hetu_script_dev_tools 类似，你需要用新的 <strong>HTAssetResourceContext</strong> 辅助类, 在创建解释器时作为参数传入，替换掉默认的 sourceContext。</p><p><strong>HTAssetResourceContext</strong> 的 root 参数是代码文件存放的根目录，如果不指定，会使用当前项目<strong>根目录下的 &#39;scripts/&#39;</strong>。</p><p>在 Flutter APP 中，使用 <strong>initFlutter()</strong> 取代原本的 <strong>init()</strong> 来初始化解释器，这会提前载入你在 pubspec.yaml 中声明的代码资源文件。注意这是一个 async 方法，因此需要加上 await 关键字。</p><p>之后，你就可以使用解释器上的 <strong>evalFile()</strong> 方法来直接载入一个代码文件。你可以省略掉路径中 root 的部分。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> sourceContext <span class="token operator">=</span> <span class="token class-name">HTAssetResourceContext</span><span class="token punctuation">(</span>root<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;scripts/&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> hetu <span class="token operator">=</span> <span class="token class-name">Hetu</span><span class="token punctuation">(</span>sourceContext<span class="token punctuation">:</span> sourceContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> hetu<span class="token punctuation">.</span><span class="token function">initFlutter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">final</span> result <span class="token operator">=</span> hetu<span class="token punctuation">.</span><span class="token function">evalFile</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;main.ht&#39;</span></span><span class="token punctuation">,</span> invoke<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;main&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9);function v(m,g){const t=p("RouterLink");return o(),i("div",null,[u,s("p",null,[n("另外，这个包还提供了一个 "),c(t,{to:"/zh-Hans/guide/command_line_tool/#REPL"},{default:l(()=>[d]),_:1}),n(" 工具用来辅助测试。")]),k])}const b=e(r,[["render",v],["__file","index.html.vue"]]);export{b as default};
