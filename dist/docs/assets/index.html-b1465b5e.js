import{_ as s,M as e,p as t,q as p,R as i,t as n,N as l,V as o,a1 as r}from"./framework-3f81730e.js";const c={},d=r(`<h1 id="内置类型" tabindex="-1"><a class="header-anchor" href="#内置类型" aria-hidden="true">#</a> 内置类型</h1><p>河图的基础类型本身就是 Dart 的对象。因此你可以直接在脚本中传递、修改这些对象，或者使用他们的 api：</p><ul><li>null</li><li>bool</li><li>num</li><li>int</li><li>double</li><li>String</li><li>Iterable</li><li>List&lt;dynamic&gt;</li><li>Set&lt;dynamic&gt;</li><li>Map&lt;dynamic, dynamic&gt;</li><li>Function (the Dart function object)</li></ul><p>例如，我们可以在脚本中使用 dart 中的 Iterable 上提供的 map 接口：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> result <span class="token operator">=</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string-literal"><span class="token string">&#39;row: </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">value</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意：</p><p>1, 河图中浮点数类型名字使用 float，而不是 double，（实际类型的数值大小会根据平台而定）。</p><p>3, 河图中没有提供 Set 和 Map 的字面量写法。你需要通过普通构造函数的形式来创建他们的对象。</p><p>4, 河图中创建的 List/Set/Map 的泛型参数在 Dart 中全都是 dynamic 类型。</p><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h2><p>河图中的字符串类型名字使用 str，而不是 String。</p><h3 id="字符串插值" tabindex="-1"><a class="header-anchor" href="#字符串插值" aria-hidden="true">#</a> 字符串插值</h3><p>字面量使用和 Javascript 相同的字符串插值写法。在 &#39;\${} 中可以写任何合法的表达式，表达式的值类型可以不是字符串，运行时将自动为其转换。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;dragon&#39;</span></span>
<span class="token comment">// print: To kill the dragon, you have to wait 42 years.</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;To kill the </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">a</span><span class="token punctuation">}</span></span><span class="token string">, you have to wait </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression"><span class="token number">6</span><span class="token operator">*</span><span class="token number">7</span></span><span class="token punctuation">}</span></span><span class="token string"> years.&#39;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多行字符串" tabindex="-1"><a class="header-anchor" href="#多行字符串" aria-hidden="true">#</a> 多行字符串</h3><p>河图 0.4.0 版本之后的字符串，默认写法可以支持跨行。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;PPP&#39;</span></span>
<span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;MMM&#39;</span></span>
<span class="token keyword">final</span> s <span class="token operator">=</span> &#39;

$<span class="token punctuation">{</span>
  p
  <span class="token operator">+</span>
  m
<span class="token punctuation">}</span>&#39;
<span class="token function">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span>&#39;a
multiline
string
&#39;<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和 Dart 的字符串插值的区别在于，即便括号中只有一个标识符，你也不能省略 &#39;{}&#39;。</p><h2 id="大整数" tabindex="-1"><a class="header-anchor" href="#大整数" aria-hidden="true">#</a> 大整数</h2><p>河图中默认加入了 Dart 中的大整数类型。使用方法和 Dart 中相同：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> bi <span class="token operator">=</span> <span class="token class-name">BigInt</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;9223372036854775807&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="future" tabindex="-1"><a class="header-anchor" href="#future" aria-hidden="true">#</a> Future</h2>`,22);function u(k,v){const a=e("RouterLink");return t(),p("div",null,[d,i("p",null,[n("参考"),l(a,{to:"/zh-Hans/grammar/future/"},{default:o(()=>[n("这个页面")]),_:1}),n("。")])])}const h=s(c,[["render",u],["__file","D:/_dev/hetu-script/docs/docs/.vuepress/.temp/pages/zh-Hans/grammar/builtin_types/index.html.vue"]]);export{h as default};
