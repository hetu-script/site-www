import{_ as n,p as a,q as s,a1 as t}from"./framework-3f81730e.js";const e={},l=t(`<h1 id="特殊语法和操作符" tabindex="-1"><a class="header-anchor" href="#特殊语法和操作符" aria-hidden="true">#</a> 特殊语法和操作符</h1><h2 id="展开语法" tabindex="-1"><a class="header-anchor" href="#展开语法" aria-hidden="true">#</a> 展开语法</h2><p>你可以在三种场合使用展开（&#39;...&#39;）：</p><h3 id="函数调用时的参数" tabindex="-1"><a class="header-anchor" href="#函数调用时的参数" aria-hidden="true">#</a> 函数调用时的参数</h3><p>你可以将一个 Iterable 展开后作为位置参数传入一个函数调用的参数列表。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>fun <span class="token function">someFunc</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>
<span class="token function">someFunc</span><span class="token punctuation">(</span><span class="token operator">...</span>list<span class="token punctuation">)</span> <span class="token comment">// same to &#39;someFunc(5, 6)&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="列表字面量" tabindex="-1"><a class="header-anchor" href="#列表字面量" aria-hidden="true">#</a> 列表字面量</h3><p>你可以在定义一个列表字面量时展开另一个列表，将其成员填充进去。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> ht <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span>list<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// same to [1, 2, 3, 4, 5, 6]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="结构体-struct-字面量" tabindex="-1"><a class="header-anchor" href="#结构体-struct-字面量" aria-hidden="true">#</a> 结构体（struct）字面量</h3><p>你可以在定义一个结构体字面量时展开另一个结构体，将其成员填充进去。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">familyName</span><span class="token operator">:</span> <span class="token string">&#39;Hord&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&#39;Luk&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> job <span class="token operator">=</span> <span class="token string">&#39;wood cutter&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>name<span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// same to:</span>
<span class="token comment">// {</span>
<span class="token comment">//   familyName: &#39;Hord&#39;,</span>
<span class="token comment">//   firstName: &#39;Luk&#39;,</span>
<span class="token comment">//   age: 23,</span>
<span class="token comment">//   job: &#39;wood cutter&#39;</span>
<span class="token comment">// }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="空值检查" tabindex="-1"><a class="header-anchor" href="#空值检查" aria-hidden="true">#</a> 空值检查</h2><p>目前河图没有使用 “空安全” 的设定。但你可以使用一些语法来进行快速的空值检查：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> a <span class="token comment">// a is null</span>
<span class="token comment">// Nullable member get:</span>
<span class="token keyword">final</span> value <span class="token operator">=</span> a<span class="token operator">?</span><span class="token punctuation">.</span>value <span class="token comment">// value is null and we won&#39;t get errors</span>
<span class="token keyword">final</span> result <span class="token operator">=</span> a<span class="token operator">?</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// nullabla function call</span>
<span class="token comment">// If null then get another value</span>
<span class="token keyword">final</span> text <span class="token operator">=</span> a <span class="token operator">?</span><span class="token operator">?</span> <span class="token string-literal"><span class="token string">&#39;hi!&#39;</span></span> <span class="token comment">// text is &#39;hi!&#39;</span>
<span class="token comment">// If null then assign</span>
a <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">=</span> <span class="token number">42</span>
<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// a is 42 now</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>空值检查具有传递性。&#39;?&#39;之后的所有可以进行控制检查的表达式都会默认允许空值。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">var</span> a <span class="token comment">// a is null</span>
<span class="token keyword">final</span> value <span class="token operator">=</span> a<span class="token operator">?</span><span class="token punctuation">.</span>collection<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// value is null and we won&#39;t get errors</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="new-操作符" tabindex="-1"><a class="header-anchor" href="#new-操作符" aria-hidden="true">#</a> new 操作符</h2><p>new 操作符是一种显示调用构造函数的方法。和普通构造函数的区别在于 new 操作符支持无参数列表（连括号也不用写）方式构造新对象。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>struct <span class="token class-name">P</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Jimmy&#39;</span></span>
<span class="token punctuation">}</span>
<span class="token keyword">final</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">P</span>
<span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="操作符优先级" tabindex="-1"><a class="header-anchor" href="#操作符优先级" aria-hidden="true">#</a> 操作符优先级</h2><p>河图中的操作符优先级是 Dart 的操作符优先级表的一个子集。</p><table><thead><tr><th style="text-align:left;">Description</th><th style="text-align:left;">Operator</th><th style="text-align:center;">Associativity</th><th style="text-align:center;">Precedence</th></tr></thead><tbody><tr><td style="text-align:left;">Unary postfix</td><td style="text-align:left;">e., e?., e++, e--, e1[e2], e()</td><td style="text-align:center;">None</td><td style="text-align:center;">16</td></tr><tr><td style="text-align:left;">Unary prefix</td><td style="text-align:left;">-e, !e, ++e, --e, await e</td><td style="text-align:center;">None</td><td style="text-align:center;">15</td></tr><tr><td style="text-align:left;">Multiplicative</td><td style="text-align:left;">*, /, ~/, %</td><td style="text-align:center;">Left</td><td style="text-align:center;">14</td></tr><tr><td style="text-align:left;">Additive</td><td style="text-align:left;">+,</td><td style="text-align:center;">Left</td><td style="text-align:center;">13</td></tr><tr><td style="text-align:left;">Relational</td><td style="text-align:left;">&lt;, &gt;, &lt;=, &gt;=, as, is, is!, in, in!</td><td style="text-align:center;">None</td><td style="text-align:center;">8</td></tr><tr><td style="text-align:left;">Equality</td><td style="text-align:left;">==, !=</td><td style="text-align:center;">None</td><td style="text-align:center;">7</td></tr><tr><td style="text-align:left;">Logical AND</td><td style="text-align:left;">&amp;&amp;</td><td style="text-align:center;">Left</td><td style="text-align:center;">6</td></tr><tr><td style="text-align:left;">Logical Or</td><td style="text-align:left;">||</td><td style="text-align:center;">Left</td><td style="text-align:center;">5</td></tr><tr><td style="text-align:left;">If null</td><td style="text-align:left;">??</td><td style="text-align:center;">Left</td><td style="text-align:center;">4</td></tr><tr><td style="text-align:left;">Conditional</td><td style="text-align:left;">e1 ? e2 : e3</td><td style="text-align:center;">Right</td><td style="text-align:center;">3</td></tr><tr><td style="text-align:left;">Assignment</td><td style="text-align:left;">=, *=, /=, ~/=, +=, -=, ??=</td><td style="text-align:center;">Right</td><td style="text-align:center;">1</td></tr></tbody></table>`,23),p=[l];function i(o,c){return a(),s("div",null,p)}const d=n(e,[["render",i],["__file","D:/_dev/hetu-script/docs/docs/.vuepress/.temp/pages/zh-Hans/grammar/operators/index.html.vue"]]);export{d as default};
