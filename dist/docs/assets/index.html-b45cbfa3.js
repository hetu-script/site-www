import{_ as n,p as s,q as a,a1 as e}from"./framework-3f81730e.js";const t={},p=e(`<h1 id="导入和导出" tabindex="-1"><a class="header-anchor" href="#导入和导出" aria-hidden="true">#</a> 导入和导出</h1><h2 id="导入-import" tabindex="-1"><a class="header-anchor" href="#导入-import" aria-hidden="true">#</a> 导入（import）</h2><p>使用导入语句（import）来导入另一个代码文件中的声明。</p><p>你可以使用 &#39;{}&#39; 来提供一个标识符列表来限制引入的声明数量。</p><p>你可以使用 &#39;as&#39; 来提供一个别名，这会为导入的代码文件创造一个新的命名空间。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">&#39;game.ht&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> hello<span class="token punctuation">,</span> calculator <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;hello.ht&#39;</span> <span class="token keyword">as</span> h

fun main <span class="token punctuation">{</span>
  h<span class="token punctuation">.</span><span class="token function">greeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>导入、导出时，你必须明确指定文件后缀（.ht 或者.json等）。</p><p>你可以在路径中使用相对路径符号 &#39;..&#39; （在 export 和 require 中也可以）。</p><h2 id="导出-export" tabindex="-1"><a class="header-anchor" href="#导出-export" aria-hidden="true">#</a> 导出（export）</h2><p>使用导出语句（export）来规定其他代码文件导入这个代码文件时所能导入的声明。</p><p>你可以导出一个其他代码文件，或者导出这个文件内的标识符。</p><p>使用附带路径的 export，<strong>可以实现先导入，再导出。这种 export 语句也会起到 import 的效果，让你可以使用这个代码文件的命名空间内的标识符。</strong>。</p><p>但你不能在不提供路径的情况下，导出你从其他代码文件导入的标识符。</p><p>如果不提供路径，必须提供一个 &#39;{}&#39; 包裹起来的标识符列表。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token punctuation">{</span>
  hello<span class="token punctuation">,</span>
  calculator<span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token string">&#39;game.ht&#39;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> hello <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;hello.ht&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你没有提供任何导出声明。则会默认导出这个代码文件中所有非私有（标识符不是以 &#39;_&#39; 开头）的顶层的声明。</p><h2 id="动态导入-require" tabindex="-1"><a class="header-anchor" href="#动态导入-require" aria-hidden="true">#</a> 动态导入（require）</h2><p>河图 0.4.0 版本之后，可以使用类似 node.js 的 require 语句来动态导入一个代码文件。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> sourceContext <span class="token operator">=</span> <span class="token class-name">HTOverlayContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> hetu <span class="token operator">=</span> <span class="token class-name">Hetu</span><span class="token punctuation">(</span>
  config<span class="token punctuation">:</span> <span class="token class-name">HetuConfig</span><span class="token punctuation">(</span>
    normalizeImportPath<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">,</span>
  sourceContext<span class="token punctuation">:</span> sourceContext<span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
hetu<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> source1 <span class="token operator">=</span> <span class="token class-name">HTSource</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">r&#39;&#39;&#39;
    var name = &#39;Richard Byson&#39;
    var age = 42
&#39;&#39;&#39;</span></span><span class="token punctuation">,</span> fullName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;source1.ht&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sourceContext<span class="token punctuation">.</span><span class="token function">addResource</span><span class="token punctuation">(</span>source1<span class="token punctuation">.</span>fullName<span class="token punctuation">,</span> source1<span class="token punctuation">)</span><span class="token punctuation">;</span>
hetu<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">r&#39;&#39;&#39;
    final { name, age } = require(&#39;source1.ht&#39;);
    print(name, age)
&#39;&#39;&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意你必须以声明变量并给与其初始化值的方式来导入。单纯使用 require 并没有任何效果。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;source1.ht&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这样写不会有任何效果！</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因为这种方式的导入会在运行时导入文件，因此你必须手动保证在代码运行之前，就已经在 sourceContext 中载入了对应路径名的文件。</p>`,22),i=[p];function c(o,l){return s(),a("div",null,i)}const r=n(t,[["render",c],["__file","D:/_dev/hetu-script/docs/docs/.vuepress/.temp/pages/zh-Hans/grammar/import/index.html.vue"]]);export{r as default};
