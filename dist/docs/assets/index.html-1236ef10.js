import{_ as c,M as s,p as i,q as l,R as a,t as n,N as e,V as r,a1 as t}from"./framework-5866ffd3.js";const u={},d=t(`<h1 id="type-system" tabindex="-1"><a class="header-anchor" href="#type-system" aria-hidden="true">#</a> Type system</h1><p><strong>WARNING: Type system is not fully implemented yet. It&#39;s more of a kind of annotation. You won&#39;t get analysis errors from them currently.</strong></p><h2 id="type-as-a-value" tabindex="-1"><a class="header-anchor" href="#type-as-a-value" aria-hidden="true">#</a> Type as a value</h2><p>Type is a top class value in Hetu, it can be assigned and returned.</p><p>To use a type value in a normal expression, you have to lead it with a <code>type</code> keyword.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>fun <span class="token function">checkType</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">when</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">type</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;a structural type&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// the function won&#39;t match here</span>
    <span class="token comment">// you have to use the exact type value here for match</span>
    <span class="token function">type</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token builtin">any</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;a function type&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="type-declaration" tabindex="-1"><a class="header-anchor" href="#type-declaration" aria-hidden="true">#</a> Type declaration</h2><p>You can assign a type value to a name with <strong>type</strong> declaration.</p><p>Type declaration is similar to a variable declaration, except it must has a initializer type expression.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">PType</span> <span class="token operator">=</span> Person
<span class="token keyword">type</span> <span class="token class-name">FuncTypedef</span> <span class="token operator">=</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> num
<span class="token keyword">type</span> <span class="token class-name">StructTypedef</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> str<span class="token punctuation">,</span>
  age<span class="token operator">:</span> num<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There are 4 kinds of type values:</p><h3 id="builtin-type" tabindex="-1"><a class="header-anchor" href="#builtin-type" aria-hidden="true">#</a> builtin type</h3><p>Some types are builtin keyword and has special use:</p><h4 id="any" tabindex="-1"><a class="header-anchor" href="#any" aria-hidden="true">#</a> any</h4><p>This is the equivalent keyword to Dart&#39;s dynamic, to indicate that this type can be assign with anything.</p><p><strong>void, never &amp; unknown are also builtin keyword, they are part of static type checker, and they are not fully implemented for now.</strong></p><h3 id="nominal-type" tabindex="-1"><a class="header-anchor" href="#nominal-type" aria-hidden="true">#</a> nominal type</h3><p>All class names can be used in a type value expression.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="structural-type" tabindex="-1"><a class="header-anchor" href="#structural-type" aria-hidden="true">#</a> structural type</h3>`,20),k={href:"https://en.wikipedia.org/wiki/Duck_typing",target:"_blank",rel:"noopener noreferrer"},v=t(`<p>It&#39;s syntax like the struct literal, however, you have to write types rather than a expression value after the key:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">StructTypedef</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> str<span class="token punctuation">;</span>
  age<span class="token operator">:</span> num<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="function-type" tabindex="-1"><a class="header-anchor" href="#function-type" aria-hidden="true">#</a> function type</h3><p>Function types are a kind of type value expression that consists of a parameter type brackets and a return value.</p><p>Unlike normal function declarations, You cannot omit any part in the function type expression.</p><p>It should have a pair of brackets, a single arrow and a return type.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">FuncTypedef</span> <span class="token operator">=</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> num
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="use-is-to-check-a-type-in-run-time" tabindex="-1"><a class="header-anchor" href="#use-is-to-check-a-type-in-run-time" aria-hidden="true">#</a> Use is to check a type in run-time</h2><p>Use <strong>is</strong> to do a run-time type check. The expression after <strong>is</strong> will be parsed into a valid type value, and you don&#39;t need to use <code>type</code> keyword after <code>is</code>.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>fun <span class="token function">doSomething</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">is</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;A String!&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">is</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;A Number!&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;Unknown type!&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="use-typeof-to-get-a-type-in-run-time" tabindex="-1"><a class="header-anchor" href="#use-typeof-to-get-a-type-in-run-time" aria-hidden="true">#</a> Use typeof to get a type in run-time</h2><p>Use <strong>typeof</strong> keyword to dynamically get the runtime type of a value.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>fun main <span class="token punctuation">{</span>
  <span class="token comment">// decalre a function type</span>
  <span class="token class-name"><span class="token keyword">type</span></span> FuncTypedef <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> num
  <span class="token comment">// assign a function to a value of a certain function type</span>
  <span class="token class-name"><span class="token keyword">var</span></span> numparse<span class="token operator">:</span> FuncTypedef <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span>value<span class="token operator">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> num <span class="token punctuation">{</span> <span class="token keyword">return</span> num<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">}</span>
  <span class="token comment">// get a value&#39;s runtime type and return it from a function</span>
  <span class="token keyword">var</span> getType <span class="token operator">=</span> fun <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">typeof</span> numparse <span class="token punctuation">}</span>
  <span class="token keyword">var</span> FuncTypedef2 <span class="token operator">=</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// use this new type</span>
  <span class="token keyword">var</span> strlength<span class="token operator">:</span> FuncTypedef2 <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span>value<span class="token operator">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> num <span class="token punctuation">{</span> <span class="token keyword">return</span> value<span class="token punctuation">.</span>length <span class="token punctuation">}</span>
  <span class="token comment">// expected output: 11</span>
  <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">strlength</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The type of a type is always &#39;type&#39;, no matter it&#39;s a primitive, instance, or function type.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Functype</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">any</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> functype<span class="token punctuation">)</span> <span class="token comment">// type</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,15);function y(m,h){const p=s("ExternalLinkIcon"),o=s("RouterLink");return i(),l("div",null,[d,a("p",null,[n("Structural type are a kind of "),a("a",k,[n("duck typing system"),e(p)]),n(". It is used with "),e(o,{to:"/en-US/grammar/struct/"},{default:r(()=>[n("struct")]),_:1}),n(".")]),v])}const b=c(u,[["render",y],["__file","index.html.vue"]]);export{b as default};
