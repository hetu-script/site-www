import{_ as t,M as p,p as o,q as i,R as a,t as n,N as c,a1 as s}from"./framework-5866ffd3.js";const r={},l=s(`<h1 id="语言实现细节" tabindex="-1"><a class="header-anchor" href="#语言实现细节" aria-hidden="true">#</a> 语言实现细节</h1><p>大部分情况下，你无须具体了解河图的解释器和编译器等工具是如何实现的。但如果你遇到了一些设计实现底层的问题，可以参考这里的一些介绍。</p><h2 id="延迟初始化" tabindex="-1"><a class="header-anchor" href="#延迟初始化" aria-hidden="true">#</a> 延迟初始化</h2><p>对于 <strong>ResourceType.hetuModule</strong> 类型的代码文件，顶层变量声明，以及类中的成员变量成名，其初始化值并不会在一开始就运算出来。而是在第一次调用前才会运算。这样是为了解决循环导入的问题。</p><h2 id="枚举" tabindex="-1"><a class="header-anchor" href="#枚举" aria-hidden="true">#</a> 枚举</h2><p>枚举值在编译时会被编译成普通的 class。因此所有的枚举值本质上都是普通对象。</p><p>例如，下面这个枚举声明：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">enum</span> <span class="token class-name">Country</span> <span class="token punctuation">{</span>
  kHungary<span class="token punctuation">,</span>
  kJapan<span class="token punctuation">,</span>
  kIndia<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会被编译成：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Country</span> <span class="token punctuation">{</span>
  <span class="token keyword">final</span> _name<span class="token punctuation">;</span>
  construct <span class="token function">_</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    _name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  fun toString <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string-literal"><span class="token string">&#39;Country.</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">_name</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span>
  <span class="token keyword">static</span> <span class="token keyword">final</span> kHungary <span class="token operator">=</span> <span class="token class-name">Country</span><span class="token punctuation">.</span><span class="token function">_</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;kHungary&#39;</span></span><span class="token punctuation">)</span>
  <span class="token keyword">static</span> <span class="token keyword">final</span> kJapan <span class="token operator">=</span> <span class="token class-name">Country</span><span class="token punctuation">.</span><span class="token function">_</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;kJapan&#39;</span></span><span class="token punctuation">)</span>
  <span class="token keyword">static</span> <span class="token keyword">final</span> kIndia <span class="token operator">=</span> <span class="token class-name">Country</span><span class="token punctuation">.</span><span class="token function">_</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;kIndia&#39;</span></span><span class="token punctuation">)</span>
  <span class="token keyword">static</span> <span class="token keyword">final</span> values <span class="token operator">=</span> <span class="token punctuation">[</span>kHungary<span class="token punctuation">,</span> kJapan<span class="token punctuation">,</span> kIndia<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但枚举值在声明时也可以加 external 关键字，这表明这是一个 Dart 中的枚举值。</p><h2 id="自动分号插入" tabindex="-1"><a class="header-anchor" href="#自动分号插入" aria-hidden="true">#</a> 自动分号插入</h2>`,12),u={href:"https://en.wikibooks.org/wiki/JavaScript/Automatic_semicolon_insertion",target:"_blank",rel:"noopener noreferrer"},d=s(`<p>使用自动分号插入技术的目的是为了避免出现多重语义，也就是编译器对语句的理解可能和用户想要达到的效果不同。</p><p>例如下面的代码中，javascript 会在 return 关键字后插入分号。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isReady<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// a semicolon will always be inserted here automatically by Javascript engine</span>
  <span class="token punctuation">{</span>
    <span class="token comment">// fields</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// some codes</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果这里没有分号，则会有两种不同理解：</p><p>1，如果 if 判断为真，函数返回的是一个对象字面量。</p><p>2，如果 if 判断为真，函数在这里直接返回空值。否则，继续执行下面的语句。</p><p>类似的多重语义还会发生在圆括号开头的段落中。因为有圆括号除了用来作为表达式分组，也有把前面的表达式当做函数直接执行的意思。</p><p>在 Javascript 中，只要你进行了换行，多数情况下都会自动插入一个分号。在河图中，规则则略有变化。</p><p>我们只会在以下面这些 token 开头的一行的<strong>上一行</strong>末尾加入分号：</p><p>&#39;{&#39;, &#39;(&#39;, &#39;[&#39;, &#39;++&#39;, &#39;--&#39;</p><p>但如果<strong>上一行</strong>是一个<strong>未结束</strong>语句，则不会加入分号。</p><p>未结束语句的意思是以下面这些 token 结尾的行：</p><p>&#39;!&#39;, &#39;*&#39;, &#39;/&#39;, &#39;%&#39;, &#39;+&#39;, &#39;-&#39;, &#39;&lt;&#39;, &#39;&lt;=&#39;, &#39;&gt;&#39;, &#39;&gt;=&#39;, &#39;=&#39;, &#39;!=&#39;, &#39;??&#39;, &#39;&amp;&amp;&#39;, &#39;||&#39;, &#39;=&#39;, &#39;+=&#39;, &#39;-=&#39;, &#39;*=&#39;, &#39;/=&#39;, &#39;??=&#39;, &#39;.&#39;, &#39;(&#39;, &#39;{&#39;, &#39;[&#39;, &#39;,&#39;, &#39;:&#39;, &#39;-&gt;&#39;, &#39;=&gt;&#39;.</p><p>除此之外，对于 return 关键字。如果后面是新的一行，则我们一定会插入一个分号。</p><p>因此如果你想要 return 一个对象字面量，需要其左边的花括号写在 return 的同一行。</p><p>类似的，需要将函数定义的左边的花括号写在函数名字或者函数参数的同一行。</p><h2 id="循环导入" tabindex="-1"><a class="header-anchor" href="#循环导入" aria-hidden="true">#</a> 循环导入</h2><p>循环导入的意思是，对于代码文件 A 和 B，在 A 中包含了 &#39;import B&#39;的声明，同时在 B 中包含了 &#39;import A&#39;的声明。</p><p>如果一个代码文件是 <strong>ResourceType.hetuModule</strong> 类型，解释器会自动处理循环引入问题。但如果代码文件的类型是 <strong>ResourceType.hetuScript</strong>，循环引用会造成 stack overflow 错误，因此你需要自行小心处理这个问题。</p><h2 id="for-in-循环" tabindex="-1"><a class="header-anchor" href="#for-in-循环" aria-hidden="true">#</a> for...in 循环</h2><p>河图中的 for...in 循环是一种利用 iterator 实现的语法糖。</p><p>如下代码：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上将会被编译成类似下面的形式：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> __iter0 <span class="token operator">=</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>iterator
<span class="token keyword">while</span> <span class="token punctuation">(</span>__iter0<span class="token punctuation">.</span><span class="token function">moveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> i <span class="token operator">=</span> __iter0<span class="token punctuation">.</span>current
  <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>iterator 相关接口使用了 Dart 中的 api，但因为本身在脚本中实现，因此并不一定需要这是一个 Dart 的列表 iterator，你可以自行在脚本中定义一个包含成员 <strong>iterator</strong> 的对象，然后这个 <strong>iterator</strong> 本身又包含一个叫做 <strong>moveNext()</strong> 的方法，那么就可以支持这种循环的语法。</p><h2 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包" aria-hidden="true">#</a> 闭包</h2><p>在河图中，每一个函数在每次执行时都会创建一个新的命名空间。同时这些命名空间可以访问上层命名空间。这样就会让函数闭包可以直接访问和修改外部定义的变量。</p><p>这类似于 Javascript，是一种动态化、运行时的实现方式。而区别于 C++/Rust 中的语法意义上的闭包（lexical closure），后者使用 move 以及按值传递参数等功能实现。</p>`,29);function k(v,m){const e=p("ExternalLinkIcon");return o(),i("div",null,[l,a("p",null,[n("自动分号插入（Automatic semicolon insertion，缩写 ASI）是一个常见的程序语言技术。主要用于那些可以省略分号，同时又允许多行语句的编程语言中。要了解更多，可以参考"),a("a",u,[n("这个页面"),c(e)]),n("。")]),d])}const h=t(r,[["render",k],["__file","index.html.vue"]]);export{h as default};
