import{_ as n,p as s,q as a,a1 as e}from"./framework-3f81730e.js";const t={},p=e(`<h1 id="结构体对象-struct" tabindex="-1"><a class="header-anchor" href="#结构体对象-struct" aria-hidden="true">#</a> 结构体对象（struct）</h1><p>河图中的结构体对象等同于 Javascript 中的对象。是一种以原型继承为基础，可以更自由的访问和创建对象成员的面向对象模式。</p><p>结构体对象的最大特点是，访问和修改不存在的成员，将会创造新成员。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>final obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
obj<span class="token punctuation">.</span>race <span class="token operator">=</span> <span class="token string">&#39;dragon&#39;</span> <span class="token comment">// okay, this will define a new member on obj.</span>
<span class="token keyword">var</span> lvl <span class="token operator">=</span> obj<span class="token punctuation">.</span>level <span class="token comment">// okay, although lvl&#39;s value will be null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="动态删除结构体的成员" tabindex="-1"><a class="header-anchor" href="#动态删除结构体的成员" aria-hidden="true">#</a> 动态删除结构体的成员</h2><p>使用 delete 关键字可以删除一个结构体对象上的成员。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;the world&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">meaning</span><span class="token operator">:</span> <span class="token number">42</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">delete</span> a<span class="token punctuation">.</span>meaning<span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: &#39;the world&#39; }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="结构体对象字面量" tabindex="-1"><a class="header-anchor" href="#结构体对象字面量" aria-hidden="true">#</a> 结构体对象字面量</h2><p>结构体对象字面量本身是一个表达式，以 &#39;{key: value}&#39; 的形式定义。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;jimmy&#39;</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">17</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对象字面量的 key 必须是一个合法的标识符，或者是一个字符串（不能使用字符串插值）。</p><h2 id="命名结构体-named-struct" tabindex="-1"><a class="header-anchor" href="#命名结构体-named-struct" aria-hidden="true">#</a> 命名结构体（named struct）</h2><p>命名结构体的声明方式类似 class。可以包含 cosntruct/get/set 等 class 特有的方法关键字。也可以在构造函数声明中重定向到其他构造函数或者父类构造函数（通过 this 和 super），以及在构造函数的参数列表中使用 <code>this</code> 来快速初始化实例成员。</p><p>在命名结构体的构造函数中，可以通过 this 关键字，省略掉成员声明，而直接给一个不存在的成员赋值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>struct Named <span class="token punctuation">{</span>
  <span class="token function">construct</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">this</span><span class="token punctuation">.</span>name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 需要保留空括号作为函数体</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问命名结构体的标识符，也可以得到一个对象字面量，你也可以直接修改它的成员。</p><p>但这种形式的修改，不会影响到之前通过构造函数创造的对象。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> n <span class="token operator">=</span> <span class="token class-name">Named</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Jimmy&#39;</span></span><span class="token punctuation">)</span>
<span class="token class-name">Named</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Jones&#39;</span></span>
<span class="token function">print</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// &#39;Jimmy&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在命名结构体中，也可以定义一个静态（static）变量。在类（class）中定义的静态变量，只能通过 &#39;类名.静态成员名&#39; 的方式访问。但命名结构体中的静态变量是可以通过 &#39;对象名.静态成员名&#39; 的方式访问的。</p><p>并且，如果你修改了这个静态成员的值，所有从这个命名结构体的构造函数获得的结构体对象，都可以访问到修改后的新值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>struct Named <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token keyword">var</span> race <span class="token operator">=</span> <span class="token string">&#39;Human&#39;</span>
  <span class="token keyword">var</span> name
  <span class="token function">construct</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
final n <span class="token operator">=</span> <span class="token function">Named</span><span class="token punctuation">(</span><span class="token string">&#39;Jimmy&#39;</span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// Jimmy</span>
<span class="token function">print</span><span class="token punctuation">(</span>Named<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// null</span>
Named<span class="token punctuation">.</span>race <span class="token operator">=</span> <span class="token string">&#39;Dragon&#39;</span>
<span class="token function">print</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>race<span class="token punctuation">)</span> <span class="token comment">// Dragon</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外一点要注意的是，命名结构体的函数在任何时候都必须通过 <strong>this</strong> 才能访问到这个结构体对象的成员。这一点和类不同。</p><h3 id="命名结构体的继承" tabindex="-1"><a class="header-anchor" href="#命名结构体的继承" aria-hidden="true">#</a> 命名结构体的继承</h3><p>命名结构体可以声明继承的对象。本质上就是指定这个结构体的原型对象。继承可以是任何结构体对象。并不一定要求是另一个命名结构体。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>struct Animal <span class="token punctuation">{</span>
  <span class="token literal-property property">walk</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;Animal walking.&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
struct Bird <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">fly</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;Bird flying.&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token literal-property property">walk</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;Bird walking.&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>命名结构体也可以像类那样在命名构造函数之后使用 <strong>this</strong> 关键字转移到默认构造函数上去（但不能使用 <strong>super</strong> 关键字）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>struct Tile <span class="token punctuation">{</span>
  <span class="token function">construct</span> <span class="token punctuation">(</span><span class="token parameter">left<span class="token punctuation">,</span> top</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left
    <span class="token keyword">this</span><span class="token punctuation">.</span>top <span class="token operator">=</span> top
  <span class="token punctuation">}</span>

  construct <span class="token function">fromPosition</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span>position<span class="token punctuation">.</span>left<span class="token punctuation">,</span> position<span class="token punctuation">.</span>top<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

final t1 <span class="token operator">=</span> <span class="token function">Tile</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
final t2 <span class="token operator">=</span> Tile<span class="token punctuation">.</span><span class="token function">fromPosition</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">print</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> t2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以在结构体字面量之前使用 struct 关键字（正如你也可以在一个函数字面量之前使用 fun 关键字）。</p><p>这种写法可以更方便的直接指定一个结构体的原型。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>struct <span class="token class-name">P</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;guy&#39;</span></span>
  <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">17</span>
<span class="token punctuation">}</span>

<span class="token keyword">final</span> p1 <span class="token operator">=</span> struct <span class="token keyword">extends</span> <span class="token class-name">P</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者，你也可以通过内部成员 <strong>$prototype</strong> 动态的修改一个结构体的原型。。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> p2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
p2<span class="token punctuation">.</span>$prototype <span class="token operator">=</span> <span class="token class-name">P</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="命名结构体混入其他结构体" tabindex="-1"><a class="header-anchor" href="#命名结构体混入其他结构体" aria-hidden="true">#</a> 命名结构体混入其他结构体</h3><p>当使用 extends 来继承时，结构体会将继承对象放在 $prototype 变量内。因此尽管在运行时可以访问到父类成员，但在打印时或 toJson 时，不会输出父类的成员。</p><p>如果希望直接在声明时就将另一个结构体的内容拷贝并混入当前结构体，可以使用关键字 with 取代 extends。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>struct Winged <span class="token punctuation">{</span>
  fun fly <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;i\\&#39;m flying&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

struct Person <span class="token keyword">with</span> Wings <span class="token punctuation">{</span>

<span class="token punctuation">}</span>

final p <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,36),c=[p];function i(o,l){return s(),a("div",null,c)}const u=n(t,[["render",i],["__file","D:/_dev/hetu-script/docs/docs/.vuepress/.temp/pages/zh-Hans/grammar/struct/index.html.vue"]]);export{u as default};
