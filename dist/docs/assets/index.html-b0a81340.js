import{_ as o,M as i,p as c,q as r,R as s,t as n,N as a,V as l,a1 as e}from"./framework-3f81730e.js";const u={},d=s("h1",{id:"简介",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#简介","aria-hidden":"true"},"#"),n(" 简介")],-1),k=s("p",null,"河图是一个专为 Flutter 打造的轻量型嵌入式脚本语言。它用纯 Dart 写成，因此可以非常轻易的嵌入 Flutter APP，和你的现有代码交互。开发这个语言的主要目的是为了实现 APP 动态布局、对已经发布的程序进行轻量级热更新、以及游戏程序的脚本框架等等在 Flutter 中受限制的语言能力。",-1),v={href:"https://pub.dev/packages/lua_dardo",target:"_blank",rel:"noopener noreferrer"},h={href:"https://fair.58.com/zh/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://openkraken.com/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/tencent/mxflutter",target:"_blank",rel:"noopener noreferrer"},b=e(`<p>而河图脚本语言的目的则是为了以最小代价实现类似的目的：只需要导入一个库 + 一行代码即可动态化。</p><h2 id="快速上手" tabindex="-1"><a class="header-anchor" href="#快速上手" aria-hidden="true">#</a> 快速上手</h2><p>下面是一个在 Dart 程序中解析一段脚本语言的例子：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:hetu_script/hetu_script.dart&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">final</span> hetu <span class="token operator">=</span> <span class="token class-name">Hetu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  hetu<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  hetu<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">r&#39;&#39;&#39;
    var ht = {
      name: &#39;Hetu&#39;,
      greeting: () {
        print(&#39;Hi! I\\&#39;m&#39;, this.name)
      }
    }
    ht.greeting()
  &#39;&#39;&#39;</span></span><span class="token punctuation">,</span> isModule<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),_=e('<ul><li><p>语句末尾的分号可写可不写。</p></li><li><p>函数声明类似 Kotlin，需要以关键字开头，函数关键字根据功能不同，包括：<strong>fun, get, set, construct</strong> 等等。</p></li><li><p>语法既支持传统 C++/Java 的以 class 为基础的面向对象，也支持 Javascript 的以原型链为基础的面向对象，也支持各种函数式写法，用户可以根据需求任选风格。</p></li><li><p>支持在关键字声明后加上类型注解（静态类型分析还在开发中，目前尚未实现）。</p></li></ul><h2 id="绑定" tabindex="-1"><a class="header-anchor" href="#绑定" aria-hidden="true">#</a> 绑定</h2>',2),f=e(`<p>下面的代码展示了一个在 Dart 中定义一个函数，然后在脚本中调用，然后再在 Dart 中读取返回值的例子：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:hetu_script/hetu_script.dart&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">final</span> hetu <span class="token operator">=</span> <span class="token class-name">Hetu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  hetu<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>externalFunctions<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string-literal"><span class="token string">&#39;hello&#39;</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&#39;greetings&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;greetings from Dart!&#39;</span></span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> hetuValue <span class="token operator">=</span> hetu<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">r&#39;&#39;&#39;
      external fun hello
      var dartValue = hello()
      dartValue[&#39;reply&#39;] = &#39;Hi, this is Hetu.&#39;
      dartValue // the script will return the value of it&#39;s last expression
      &#39;&#39;&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;hetu value: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">hetuValue</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function x(V,w){const t=i("ExternalLinkIcon"),p=i("RouterLink");return c(),r("div",null,[d,k,s("p",null,[n("目前已经有一些框架为了相似的目的而存在，例如可以动态调用 Lua 语言的"),s("a",v,[n("Lua Dardo"),a(t)]),n("，可以根据 Json 生成界面的"),s("a",h,[n("Flutter Fair"),a(t)]),n("，等等。还有一些如 "),s("a",m,[n("Kraken"),a(t)]),n(" 和 "),s("a",g,[n("MXFlutter"),a(t)]),n(" 等方案试图完全将 Flutter APP 前端化。这些方案大多都极为笨重（依托于 V8 等 Javascript 引擎）。并且需要开发者维护一整套胶水方案来达到目的。")]),b,s("p",null,[n("可以看到，河图尽管是一个新语言，但它的"),a(p,{to:"/zh-Hans/guide/syntax/"},{default:l(()=>[n("语法")]),_:1}),n("类似 typescript/kotlin/swift 等现代语言，一目了然，只需要几分钟了解下一些关键区别就可以开始写代码了：")]),_,s("p",null,[a(p,{to:"/zh-Hans/guide/binding/"},{default:l(()=>[n("河图和 Dart 的交互")]),_:1}),n("简单到令人发指。大多数时候你都可以直接向脚本中传递 Dart 的数值，也可以直接使用脚本传回的对象。")]),f])}const D=o(u,[["render",x],["__file","D:/_dev/hetu-script/docs/docs/.vuepress/.temp/pages/zh-Hans/guide/index.html.vue"]]);export{D as default};
