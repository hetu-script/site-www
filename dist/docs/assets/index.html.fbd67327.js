import{f as n}from"./app.4f14c345.js";import{_ as s}from"./plugin-vue_export-helper.21dcd24c.js";const a={},p=n(`<h1 id="strict-mode" tabindex="-1"><a class="header-anchor" href="#strict-mode" aria-hidden="true">#</a> Strict mode</h1><h2 id="zero-value" tabindex="-1"><a class="header-anchor" href="#zero-value" aria-hidden="true">#</a> Zero value</h2><p>In non-strict mode, variable with null value can be treated as 0.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>final obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token operator">++</span>obj<span class="token punctuation">.</span>count <span class="token comment">// obj = { count: 1 }</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="truth-value" tabindex="-1"><a class="header-anchor" href="#truth-value" aria-hidden="true">#</a> Truth value</h2><p>In non-strict mode, some expressions will be inexplicitly converted to boolean:</p><p>1, if (expr)</p><p>2, (expr) ? //... : //...</p><p>2, do { //... } while (expr)</p><p>3, while (expr)</p><p>4, expr1 &amp;&amp; expr2</p><p>5, expr1 || expr2</p><p>The conversion rules is:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token comment">/// inexpicit type conversion for truthy values</span>
bool <span class="token function">_truthy</span><span class="token punctuation">(</span><span class="token keyword">dynamic</span> condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>_isStrictMode <span class="token operator">||</span> condition <span class="token operator">is</span> bool<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> condition<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>condition <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span>
      condition <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span>
      condition <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&#39;&#39;</span></span> <span class="token operator">||</span>
      condition <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&#39;0&#39;</span></span> <span class="token operator">||</span>
      condition <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&#39;false&#39;</span></span> <span class="token operator">||</span>
      <span class="token punctuation">(</span>condition <span class="token operator">is</span> <span class="token class-name">Iterable</span> <span class="token operator">&amp;&amp;</span> condition<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span> <span class="token operator">||</span>
      <span class="token punctuation">(</span>condition <span class="token operator">is</span> <span class="token class-name">Map</span> <span class="token operator">&amp;&amp;</span> condition<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span> <span class="token operator">||</span>
      <span class="token punctuation">(</span>condition <span class="token operator">is</span> <span class="token class-name">HTStruct</span> <span class="token operator">&amp;&amp;</span> condition<span class="token punctuation">.</span>fields<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><strong>In other situations boolean won&#39;t be inexplicitly converted</strong>.</p>`,15);function e(t,o){return p}var l=s(a,[["render",e]]);export{l as default};
