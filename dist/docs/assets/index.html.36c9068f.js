import{r as p,o as c,c as l,b as n,e as a,w as i,F as r,f as e,d as s}from"./app.321bd41d.js";import{_ as u}from"./plugin-vue_export-helper.21dcd24c.js";const k={},d=e(`<h1 id="communicating-with-dart" tabindex="-1"><a class="header-anchor" href="#communicating-with-dart" aria-hidden="true">#</a> Communicating with Dart</h1><p>There are three ways to communicate with Dart: Builtin value, Json, Binding. They have pros and cons respectively. You can choose the style best suits your needs.</p><h2 id="how-to-pass-values" tabindex="-1"><a class="header-anchor" href="#how-to-pass-values" aria-hidden="true">#</a> How to pass values</h2><p>You can get value from Hetu by the return value of Interpreter&#39;s <strong>invoke</strong> function, and pass object from Dart to Hetu by the positionalArgs and namedArgs of the invoke function methods:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token keyword">final</span> result <span class="token operator">=</span> hetu<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;calculate&#39;</span></span><span class="token punctuation">,</span> positionalArgs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> namedArgs<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&#39;isFloat&#39;</span></span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// equivalent in script</span>
<span class="token comment">// final result = calculate(6, 7, isFloat: true)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="builtin-values" tabindex="-1"><a class="header-anchor" href="#builtin-values" aria-hidden="true">#</a> Builtin values</h2><p>For these kind of values, their bindings are pre-included within the interpreter. Thus you can pass, get and modify them directly within script.</p><ul><li>null</li><li>bool</li><li>int</li><li>double (it is called float in the script)</li><li>String</li><li>List&lt;dynamic&gt;</li><li>Set&lt;dynamic&gt;</li><li>Map&lt;dynamic, dynamic&gt;</li><li>Function</li></ul><p>You can directly access and set the sub value of a List and Map directly by &#39;[]&#39; operator and call a Dart Function by &#39;()&#39; operator in script.</p><h2 id="json" tabindex="-1"><a class="header-anchor" href="#json" aria-hidden="true">#</a> Json</h2><p>The HTStruct object in Dart code can be used like a map to get and set members by <strong>[]</strong> operator in Dart. And it has builtin method: toJson() and fromJson() on its root prototype in script. So you can pass complex data set in this form between script and Dart.</p><p>In script:</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> book <span class="token operator">=</span> prototype<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span><span class="token keyword">data</span><span class="token punctuation">)</span>
  <span class="token function">print</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>In dart:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> data <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-literal"><span class="token string">&#39;id&#39;</span></span><span class="token punctuation">:</span> <span class="token number">324</span><span class="token punctuation">,</span>
  <span class="token string-literal"><span class="token string">&#39;title&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Catcher in the Rye&#39;</span></span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
hetu<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;main&#39;</span></span><span class="token punctuation">,</span> positionalArgs<span class="token punctuation">:</span> <span class="token punctuation">[</span>data<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>output:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">324</span><span class="token punctuation">,</span>
  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Catcher in the Rye&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="binding" tabindex="-1"><a class="header-anchor" href="#binding" aria-hidden="true">#</a> Binding</h2><p>Primitives and Json are a quick way to pass around values without any binding. However, if you want to create a Dart object, or to call a Dart function more efficiently, you have to tell the script the exact definition of the external functions and classes.</p><h3 id="external-function" tabindex="-1"><a class="header-anchor" href="#external-function" aria-hidden="true">#</a> External function</h3><p>You can directy bind a Dart function as it is:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token keyword">await</span> hetu<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>externalFunctions<span class="token punctuation">:</span> <span class="token punctuation">{</span>
  <span class="token string-literal"><span class="token string">&#39;hello&#39;</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&#39;greeting&#39;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;hello&#39;</span></span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>It&#39;s easier to write and read in Dart Function form. However, this way the Interpreter will have to use Dart&#39;s <strong>Function.apply</strong> feature to call it. This is normally slower and inefficient than direct call.</p><p>Or you can define a external functions in dart for use in Hetu with following type:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token comment">/// typedef of external function for binding.</span>
<span class="token keyword">typedef</span> <span class="token class-name">HTExternalFunction</span> <span class="token operator">=</span> <span class="token keyword">dynamic</span> <span class="token class-name">Function</span><span class="token punctuation">(</span>
    <span class="token class-name">HTEntity</span> entity<span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> positionalArgs<span class="token punctuation">,</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> namedArgs<span class="token punctuation">,</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HTType</span><span class="token punctuation">&gt;</span></span> typeArgs<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Then define those dart funtion in Hetu with <strong>external</strong> keyword and init Hetu with <strong>externalFunctions</strong> argument. Then you can call those functions in Hetu.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token string">&#39;package:hetu_script/hetu_script.dart&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> async <span class="token punctuation">{</span>
  <span class="token keyword">var</span> hetu <span class="token operator">=</span> <span class="token function">Hetu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> hetu<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>externalFunctions<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;hello&#39;</span><span class="token operator">:</span> <span class="token punctuation">(</span>HTEntity entity<span class="token punctuation">,</span>
        <span class="token punctuation">{</span>List<span class="token operator">&lt;</span>dynamic<span class="token operator">&gt;</span> positionalArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> dynamic<span class="token operator">&gt;</span> namedArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            List<span class="token operator">&lt;</span>HTTypeId<span class="token operator">&gt;</span> typeArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token string-property property">&#39;greeting&#39;</span><span class="token operator">:</span> <span class="token string">&#39;Hello from Dart!&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  final hetuValue <span class="token operator">=</span> hetu<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span>r<span class="token string">&#39;&#39;</span>&#39;
      external fun hello
      <span class="token keyword">var</span> dartValue <span class="token operator">=</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      dartValue<span class="token punctuation">[</span><span class="token string">&#39;reply&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;Hi, this is Hetu.&#39;</span>
      dartValue <span class="token comment">// the script will return the value of it&#39;s last expression</span>
      <span class="token string">&#39;&#39;</span>&#39;<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;hetu value: $hetuValue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>And the output should be:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>hetu value: {&#39;greeting&#39;: &#39;Hello from Dart!&#39;, &#39;reply&#39;: &#39;Hi, this is Hetu.&#39;}
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="external-methods-in-classes" tabindex="-1"><a class="header-anchor" href="#external-methods-in-classes" aria-hidden="true">#</a> External methods in classes</h3><p>A Hetu class could have a external method, even if other part of this class is all Hetu.</p><p>When called, the first argument passed from the script will be the instance instead of the namespace.</p><p>For example, we have the following class with a external method:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Someone</span> <span class="token punctuation">{</span>
  <span class="token keyword">external</span> fun calculate
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>We have to define a external method in Dart code:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token keyword">dynamic</span> <span class="token function">calculate</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> <span class="token punctuation">{</span>positionalArgs<span class="token punctuation">,</span> namedArgs<span class="token punctuation">,</span> typeArgs<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// do somthing about the object</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>We have to bind this external method some where in the Dart code, before we can use it in Hetu:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token comment">// the key of this external method have to be in the form of &#39;className.methodName&#39;</span>
hetu<span class="token punctuation">.</span><span class="token function">bindExternalFunction</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Someone.calculate&#39;</span></span><span class="token punctuation">,</span> calculate<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Then it&#39;s okay to call this in Hetu:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token keyword">var</span> ss <span class="token operator">=</span> <span class="token class-name">Someone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
ss<span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>You can also have a external method on a named struct:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>struct Person <span class="token punctuation">{</span>
  external fun sing
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Everything else you should do is the same to a external method on a class.</p><h3 id="external-class" tabindex="-1"><a class="header-anchor" href="#external-class" aria-hidden="true">#</a> External class</h3><p>You can use a Dart object with full class definition in Hetu.</p><p>To achieve this, you have to write a full definition of that class in Hetu, which includes 4 parts of code:</p>`,46),m=n("li",null,[n("p",null,"Original class definition of the class you intended to use in Hetu. For Dart & Flutter, this is the part where you already have when you import a library.")],-1),b=s("An "),g={href:"https://dart.dev/guides/language/extension-methods",target:"_blank",rel:"noopener noreferrer"},h=s("extension"),y=s(" on that class which providing "),f=n("strong",null,"htFetch & htAssign",-1),w=s(" methods. This part is used for dynamic reflection in Hetu and should return members of this class."),v=s("A binding definition of that class, which extends "),x=n("strong",null,"HTExternalClass",-1),_=s(" interface provided by Hetu's dart lib, and provides "),H=n("strong",null,"memberGet, memberSet, instanceMemberGet, instanceMemberSet",-1),T=s(" methods. You have to bind a instance of this class with method "),A=n("strong",null,"bindExternalClass()",-1),F=s(" on the interpreter. This part is used for access to the constructor and static members of that class."),P=n("li",null,[n("p",null,[s("Declare that class with keyword "),n("strong",null,"external"),s(" in Hetu script (includes its members' declaration). This part is used for Hetu to understand the structure and type of this class, and is used for syntax check and argument default values, etc.")])],-1),S=e(`<p>You can check the following example for how to bind a class and its various kinds of members.</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:hetu_script/hetu_script.dart&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:hetu_script/binding.dart&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token keyword">final</span> races <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;Caucasian&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token class-name">String</span> _level <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;0&#39;</span></span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token keyword">get</span> level <span class="token operator">=</span><span class="token operator">&gt;</span> _level<span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token keyword">set</span> <span class="token function">level</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> _level <span class="token operator">=</span> value<span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">meaning</span><span class="token punctuation">(</span>int n<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string-literal"><span class="token string">&#39;The meaning of life is </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">n</span></span><span class="token string">&#39;</span></span><span class="token punctuation">;</span>

  <span class="token class-name">String</span> <span class="token keyword">get</span> child <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string-literal"><span class="token string">&#39;Tom&#39;</span></span><span class="token punctuation">;</span>
  <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  <span class="token class-name">String</span> race<span class="token punctuation">;</span>

  <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Jimmy&#39;</span></span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>race <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Caucasian&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">withName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>race <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Caucasian&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">void</span> <span class="token function">greeting</span><span class="token punctuation">(</span><span class="token class-name">String</span> tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Hi! </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">tag</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">extension</span> <span class="token class-name">PersonBinding</span> <span class="token keyword">on</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token keyword">dynamic</span> <span class="token function">htFetch</span><span class="token punctuation">(</span><span class="token class-name">String</span> varName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>varName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&#39;name&#39;</span></span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&#39;race&#39;</span></span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> race<span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&#39;greeting&#39;</span></span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">HTEntity</span> entity<span class="token punctuation">,</span>
                <span class="token punctuation">{</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> positionalArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> namedArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HTType</span><span class="token punctuation">&gt;</span></span> typeArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span>
            <span class="token function">greeting</span><span class="token punctuation">(</span>positionalArgs<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&#39;child&#39;</span></span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> child<span class="token punctuation">;</span>
      <span class="token keyword">default</span><span class="token punctuation">:</span>
        <span class="token keyword">throw</span> <span class="token class-name">HTError</span><span class="token punctuation">.</span><span class="token function">undefined</span><span class="token punctuation">(</span>varName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">htAssign</span><span class="token punctuation">(</span><span class="token class-name">String</span> varName<span class="token punctuation">,</span> <span class="token keyword">dynamic</span> varValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>varName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&#39;name&#39;</span></span><span class="token punctuation">:</span>
        name <span class="token operator">=</span> varValue<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&#39;race&#39;</span></span><span class="token punctuation">:</span>
        race <span class="token operator">=</span> varValue<span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">default</span><span class="token punctuation">:</span>
        <span class="token keyword">throw</span> <span class="token class-name">HTError</span><span class="token punctuation">.</span><span class="token function">undefined</span><span class="token punctuation">(</span>varName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">PersonClassBinding</span> <span class="token keyword">extends</span> <span class="token class-name">HTExternalClass</span> <span class="token punctuation">{</span>
  <span class="token class-name">PersonClassBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Person&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">dynamic</span> <span class="token function">memberGet</span><span class="token punctuation">(</span><span class="token class-name">String</span> varName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>varName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&#39;Person&#39;</span></span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">HTEntity</span> entity<span class="token punctuation">,</span>
                <span class="token punctuation">{</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> positionalArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> namedArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HTType</span><span class="token punctuation">&gt;</span></span> typeArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span>
            <span class="token class-name">Person</span><span class="token punctuation">(</span>positionalArgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> positionalArgs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&#39;Person.withName&#39;</span></span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">HTEntity</span> entity<span class="token punctuation">,</span>
                <span class="token punctuation">{</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> positionalArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> namedArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HTType</span><span class="token punctuation">&gt;</span></span> typeArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span>
            <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">withName</span><span class="token punctuation">(</span>positionalArgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                <span class="token punctuation">(</span>positionalArgs<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">?</span> positionalArgs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;Caucasion&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&#39;Person.meaning&#39;</span></span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">HTEntity</span> entity<span class="token punctuation">,</span>
                <span class="token punctuation">{</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> positionalArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> namedArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HTType</span><span class="token punctuation">&gt;</span></span> typeArgs <span class="token operator">=</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span>
            <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">meaning</span><span class="token punctuation">(</span>positionalArgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&#39;Person.level&#39;</span></span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>level<span class="token punctuation">;</span>
      <span class="token keyword">default</span><span class="token punctuation">:</span>
        <span class="token keyword">throw</span> <span class="token class-name">HTError</span><span class="token punctuation">.</span><span class="token function">undefined</span><span class="token punctuation">(</span>varName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">memberSet</span><span class="token punctuation">(</span><span class="token class-name">String</span> varName<span class="token punctuation">,</span> <span class="token keyword">dynamic</span> varValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>varName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&#39;Person.race&#39;</span></span><span class="token punctuation">:</span>
        <span class="token keyword">throw</span> <span class="token class-name">HTError</span><span class="token punctuation">.</span><span class="token function">immutable</span><span class="token punctuation">(</span>varName<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&#39;Person.level&#39;</span></span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>level <span class="token operator">=</span> varValue<span class="token punctuation">;</span>
      <span class="token keyword">default</span><span class="token punctuation">:</span>
        <span class="token keyword">throw</span> <span class="token class-name">HTError</span><span class="token punctuation">.</span><span class="token function">undefined</span><span class="token punctuation">(</span>varName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">dynamic</span> <span class="token function">instanceMemberGet</span><span class="token punctuation">(</span><span class="token keyword">dynamic</span> object<span class="token punctuation">,</span> <span class="token class-name">String</span> varName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> i <span class="token operator">=</span> object <span class="token operator">as</span> <span class="token class-name">Person</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> i<span class="token punctuation">.</span><span class="token function">htFetch</span><span class="token punctuation">(</span>varName<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">void</span> <span class="token function">instanceMemberSet</span><span class="token punctuation">(</span><span class="token keyword">dynamic</span> object<span class="token punctuation">,</span> <span class="token class-name">String</span> varName<span class="token punctuation">,</span> <span class="token keyword">dynamic</span> varValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> i <span class="token operator">=</span> object <span class="token operator">as</span> <span class="token class-name">Person</span><span class="token punctuation">;</span>
    i<span class="token punctuation">.</span><span class="token function">htAssign</span><span class="token punctuation">(</span>varName<span class="token punctuation">,</span> varValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> hetu <span class="token operator">=</span> <span class="token class-name">Hetu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  hetu<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>externalClasses<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">PersonClassBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  hetu<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;&#39;&#39;
      external class Person {
        var race: str
        construct([name: str = &#39;Jimmy&#39;, race: str = &#39;Caucasian&#39;]);
        get child
        static fun meaning(n: num)
        static get level
        static set level (value: str)
        construct withName(name: str, [race: str = &#39;Caucasian&#39;])
        var name
        fun greeting(tag: str)
      }
      fun main {
        var p1: Person = Person()
        p1.greeting(&#39;jimmy&#39;)
        print(Person.meaning(42))
        print(typeof p1)
        print(p1.name)
        print(p1.child)
        print(&#39;My race is&#39;, p1.race)
        p1.race = &#39;Reptile&#39;
        print(&#39;Oh no! My race turned into&#39;, p1.race)
        Person.level = &#39;3&#39;
        print(Person.level)

        var p2 = Person.withName(&#39;Jimmy&#39;)
        print(p2.name)
        p2.name = &#39;John&#39;
      }
      &#39;&#39;&#39;</span></span><span class="token punctuation">,</span> isModule<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> invokeFunc<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&#39;main&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br></div></div><h4 id="external-getter" tabindex="-1"><a class="header-anchor" href="#external-getter" aria-hidden="true">#</a> External getter</h4><p>For external getter, you don&#39;t need a full external function definition on <strong>external class binding</strong> or <strong>extension on instance</strong>. You can directly return the value in the dart code.</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">PersonClassBinding</span> <span class="token keyword">extends</span> <span class="token class-name">HTExternalClass</span> <span class="token punctuation">{</span>
  <span class="token class-name">PersonClassBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Person&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token metadata function">@override</span>
  <span class="token keyword">dynamic</span> <span class="token function">memberGet</span><span class="token punctuation">(</span><span class="token class-name">String</span> varName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&#39;Person.level&#39;</span></span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>level<span class="token punctuation">;</span>
      <span class="token keyword">default</span><span class="token punctuation">:</span>
        <span class="token keyword">throw</span> <span class="token class-name">HTError</span><span class="token punctuation">.</span><span class="token function">undefined</span><span class="token punctuation">(</span>varName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="partial-binding" tabindex="-1"><a class="header-anchor" href="#partial-binding" aria-hidden="true">#</a> Partial binding</h4><p>You don&#39;t always need all of the definitions and declarations as the example above.</p><p>If you defined an external class binding without instanceMemberGet, instanceMemberSet and the extension on instance, you <strong>are limited to access this class&#39;s static members and constructors with &#39;className.memberName&#39;</strong>.</p><p>If you omit the memberGet &amp; memberSet on external class binding, and just define instanceMemberGet, instanceMemberSet and the extension on instance, you can access the instance member of this Dart instance, but <strong>cannot access to its static class member &amp; constructors</strong>.</p><h3 id="typedef-of-dart-function" tabindex="-1"><a class="header-anchor" href="#typedef-of-dart-function" aria-hidden="true">#</a> Typedef of Dart function</h3><p>Sometimes, we want to return a pure Dart function from the script side.For example, the onPressed parameter of a Widget&#39;s constructor. It is possible to do so with a <strong>external function typedef declaration</strong>, it is a brackets after the fun keyword.</p><p>In Hetu script, we have this function typedef:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code>fun <span class="token punctuation">[</span><span class="token class-name">DartFunction</span><span class="token punctuation">]</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> num<span class="token punctuation">,</span> b<span class="token punctuation">:</span> num<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> num <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>

fun getFunc <span class="token punctuation">{</span>
  <span class="token keyword">return</span> add
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Then when you evaluate this <em>add</em> function in Hetu, you will get a native Dart function. This grammar could also be used on literal function, this is especially usefull when you try to bind callback function to a dart widget.</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token keyword">typedef</span> <span class="token class-name">DartFunction</span> <span class="token operator">=</span> int <span class="token class-name">Function</span><span class="token punctuation">(</span>int a<span class="token punctuation">,</span> int b<span class="token punctuation">)</span><span class="token punctuation">;</span>

int <span class="token function">hetuAdd</span><span class="token punctuation">(</span><span class="token class-name">DartFunction</span> func<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> func <span class="token operator">=</span> hetu<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;getFunc&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>You have to bind the Dart typedef in <strong>init</strong> method of the interpreter before you can use it.</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token keyword">await</span> hetu<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>externalFunctions<span class="token punctuation">:</span> <span class="token punctuation">{</span>
  externalFunctionTypedef<span class="token punctuation">:</span> <span class="token punctuation">{</span>
  <span class="token string-literal"><span class="token string">&#39;DartFunction&#39;</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">HTFunction</span> function<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>int a<span class="token punctuation">,</span> int b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// must convert the return type here to let dart know its return value type.</span>
      <span class="token keyword">return</span> function<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">as</span> int<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>The typedef of the unwrapper is:</p><div class="language-dart ext-dart line-numbers-mode"><pre class="language-dart"><code><span class="token keyword">typedef</span> <span class="token class-name">HTExternalFunctionTypedef</span> <span class="token operator">=</span> <span class="token class-name">Function</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token class-name">HTFunction</span> hetuFunction<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="auto-binding-tools" tabindex="-1"><a class="header-anchor" href="#auto-binding-tools" aria-hidden="true">#</a> Auto-Binding tools</h3><p><strong>This tool is outdated and not suitable for this version of Hetu, we may fix it some time in the future.</strong></p>`,21),N=s("Thanks to "),D={href:"https://github.com/rockingdice",target:"_blank",rel:"noopener noreferrer"},E=s("rockingdice"),C=s(" we now have an automated tool for auto-generate both Dart-side and Hetu-side binding declarations for any Dart classes."),j=s("Please check out this repository: "),M={href:"https://github.com/hetu-script/hetu-script-autobinding",target:"_blank",rel:"noopener noreferrer"},L=s("hetu-script-autobinding");function V(B,I){const t=p("ExternalLinkIcon"),o=p("RouterLink");return c(),l(r,null,[d,n("ul",null,[m,n("li",null,[n("p",null,[b,n("a",g,[h,a(t)]),y,f,w])]),n("li",null,[n("p",null,[v,x,_,H,T,a(o,{to:"/en-US/api_reference/dart/"},{default:i(()=>[A]),_:1}),F])]),P]),S,n("p",null,[N,n("a",D,[E,a(t)]),C]),n("p",null,[j,n("a",M,[L,a(t)])])],64)}var G=u(k,[["render",V]]);export{G as default};
