import{_ as n,p as s,q as a,a1 as t}from"./framework-3f81730e.js";const e={},p=t(`<h1 id="异步操作-future" tabindex="-1"><a class="header-anchor" href="#异步操作-future" aria-hidden="true">#</a> 异步操作（Future）</h1><p>河图脚本有可能获得一个 Dart 中的 Future 对象。为了方便起见，我们提供了一个简单的封装，让脚本可以和 Future 交互。</p><p>你可以在脚本中通过 then() 来传递一个脚本中的函数，它将会在这个 Future 完成后被执行：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:hetu_script/hetu_script.dart&#39;</span></span><span class="token punctuation">;</span>

<span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Imagine that this function is fetching user info from another service or database.</span>
  <span class="token keyword">return</span> <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span>
      <span class="token keyword">const</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Hello world after 2 seconds!&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">final</span> hetu <span class="token operator">=</span> <span class="token class-name">Hetu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  hetu<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>externalFunctions<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&#39;fetch&#39;</span></span><span class="token punctuation">:</span> fetch<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  hetu<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">r&#39;&#39;&#39;
      external fun fetch
      final future = fetch()
      future.then((value) {
        print(&#39;future completed!&#39;)
      })
  &#39;&#39;&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="手动创建一个-future-对象" tabindex="-1"><a class="header-anchor" href="#手动创建一个-future-对象" aria-hidden="true">#</a> 手动创建一个 Future 对象</h2><p>河图 0.4.0 版本之后，可以通过 Future 类的构造函数手动创建一个 Future 对象：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> a <span class="token operator">=</span> <span class="token class-name">Future</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">42</span> <span class="token punctuation">)</span>
a<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token number">41</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码将会先打印 41，然后打印 42。</p><p>你也可以在函数定义代码块的括号之前添加 <code>async</code> 关键字来方便的返回一个 Future 对象：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 函数声明时附带async</span>
fun testAsync <span class="token keyword">async</span> <span class="token punctuation">{</span>
  <span class="token comment">// some code</span>
<span class="token punctuation">}</span>

<span class="token comment">// 匿名函数附带async</span>
<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
  <span class="token comment">// some code</span>
<span class="token punctuation">}</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 匿名函数的好处是可以原地立即执行，这种用法类似 Javascript</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式声明的函数，本质上还是创建了一个 Dart 的 Future 对象。然后将脚本函数作为其参数。</p><h2 id="等待多个-future-返回" tabindex="-1"><a class="header-anchor" href="#等待多个-future-返回" aria-hidden="true">#</a> 等待多个 Future 返回</h2><p>河图 0.4.0 版本之后，可以使用 Future 类上的静态函数 wait() 来等待多个 Future 完成，然后统一返回。</p><p>注意在脚本中，不能使用 Dart 的泛型参数，因此所有的 Future 返回的都是 dynamic 类型。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">async</span> asyncFunc1 <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">41</span>
<span class="token keyword">async</span> asyncFunc2 <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">42</span>

<span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">asyncFunc1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">asyncFunc2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>valueList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">print</span><span class="token punctuation">(</span>valueList<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述的代码将会打印：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[
  41,
  42
]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="await" tabindex="-1"><a class="header-anchor" href="#await" aria-hidden="true">#</a> await</h2><p>在河图 0.5.0 版本之后，可以在部分情况下支持 await 关键字，来避免过于复杂的 <code>then</code> 形式的回调函数。</p><p>目前这是一个试验性质的功能，可能会有一些潜在的 bug，而且也并非在所有场景下都支持使用 <code>await</code>。</p><p>目前仅可以在普通的表达式中使用。包括变量初始化表达式等等。</p><p>但不能在 for 循环的初始化表达式，以及函数调用参数中的表达式中使用 <code>await</code>。</p><p>可以使用 await 的场合的简单例子：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">await</span> <span class="token function">valueFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">await</span> <span class="token function">sumAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,24),c=[p];function o(u,i){return s(),a("div",null,c)}const r=n(e,[["render",o],["__file","D:/_dev/hetu-script/docs/docs/.vuepress/.temp/pages/zh-Hans/grammar/future/index.html.vue"]]);export{r as default};
